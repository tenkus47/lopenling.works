"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkteminusclient"] = self["webpackChunkteminusclient"] || []).push([["default-app_components_TextDetail_AnnotationControlsContainer_js"],{

/***/ "./app/components/TextDetail/AnnotationControlsContainer.js":
/*!******************************************************************!*\
  !*** ./app/components/TextDetail/AnnotationControlsContainer.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"mapStateToProps\": () => (/* binding */ mapStateToProps)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var redux_batched_actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! redux-batched-actions */ \"./node_modules/redux-batched-actions/lib/index.js\");\n/* harmony import */ var _AnnotationControls__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AnnotationControls */ \"./app/components/TextDetail/AnnotationControls.js\");\n/* harmony import */ var lib_addTibetanShay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lib/addTibetanShay */ \"./app/lib/addTibetanShay.js\");\n/* harmony import */ var reducers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! reducers */ \"./app/reducers/index.js\");\n/* harmony import */ var actions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! actions */ \"./app/actions/index.js\");\n/* harmony import */ var lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lib/AnnotatedText */ \"./app/lib/AnnotatedText.js\");\n/* harmony import */ var lib_Annotation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lib/Annotation */ \"./app/lib/Annotation.js\");\n/* harmony import */ var lib_User__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lib/User */ \"./app/lib/User.js\");\n/* harmony import */ var lib_Witness__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lib/Witness */ \"./app/lib/Witness.js\");\n/* harmony import */ var lib_TextSegment__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lib/TextSegment */ \"./app/lib/TextSegment.js\");\n/* harmony import */ var lib_SplitText__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lib/SplitText */ \"./app/lib/SplitText.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var react_dom_server__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! react-dom/server */ \"./node_modules/react-dom/server.browser.js\");\n/* harmony import */ var lib_Question__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lib/Question */ \"./app/lib/Question.js\");\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TEMPORARY_ANNOTATION_ID = -3;\nvar BASE_NAME = \"Working\";\n\nvar getAnnotationsData = function getAnnotationsData(annotations, sources, workingSourceName, selectedText) {\n  var annotationsData = [];\n  var baseSources = sources.filter(function (source) {\n    return source.isWorking || source.isBase;\n  });\n  var baseSourceNames = baseSources.map(function (source) {\n    return source.name;\n  });\n\n  if (annotations) {\n    var annotationsById = {};\n\n    var _loop = function _loop(i) {\n      var annotation = annotations[i];\n      var id = annotation.content + annotation.start;\n\n      if (annotation.isTemporary) {\n        annotationsById[TEMPORARY_ANNOTATION_ID] = {\n          name: annotation.getSourceName(),\n          content: annotation.content,\n          id: annotation.uniqueId,\n          isTemporary: true,\n          annotation: annotation\n        };\n        baseSourceNames = baseSourceNames.filter(function (a) {\n          return a !== annotation.getSourceName();\n        });\n        id = TEMPORARY_ANNOTATION_ID;\n      } else if (annotationsById[id]) {\n        var existingAnnotation = annotationsById[id];\n        existingAnnotation.name += \" \" + (0,lib_addTibetanShay__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(annotation.getSourceName());\n        baseSourceNames = baseSourceNames.filter(function (a) {\n          return a !== annotation.getSourceName();\n        });\n      } else {\n        annotationsById[id] = {\n          name: (0,lib_addTibetanShay__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(annotation.getSourceName()),\n          content: annotation.content,\n          id: annotation.uniqueId,\n          userCreated: annotation.userCreated,\n          annotation: annotation\n        };\n        baseSourceNames = baseSourceNames.filter(function (a) {\n          return a !== annotation.getSourceName();\n        });\n      }\n\n      if (!annotation.userCreated && annotation.creatorWitness.isWorking) {\n        annotationsById[id].isWorking = true;\n      } else {\n        annotationsById[id].isWorking = false;\n      }\n    };\n\n    for (var i = 0; i < annotations.length; i++) {\n      _loop(i);\n    } // Make sure Working source is first\n\n\n    baseSourceNames.unshift(workingSourceName);\n    var Base = baseSourceNames;\n\n    if ((selectedText === null || selectedText === void 0 ? void 0 : selectedText.name) !== \"བྱང་ཆུབ་སེམས་དཔའི་སྤྱོད་པ་ལ་འཇུག་པ་བཞུགས་སོ།\") {\n      //Dominant only awailable for chojuk text\n      Base = baseSourceNames.filter(function (l) {\n        return l !== \"Dominant\";\n      });\n    }\n\n    annotationsData = Object.keys(annotationsById).reduce(function (arr, key) {\n      var annotationData = annotationsById[key];\n\n      if (annotationData.isWorking) {\n        annotationData.name = Base.reduce(function (prev, cur) {\n          return prev += \" \" + (0,lib_addTibetanShay__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(cur, \";\");\n        }, \"\");\n      }\n\n      arr.push(annotationData);\n      return arr;\n    }, []);\n  }\n\n  return annotationsData;\n};\n\nvar getAvailableAnnotations = function getAvailableAnnotations(annotatedText, activeAnnotation, temporaryAnnotation, annotationPositions) {\n  var availableAnnotations = [];\n\n  if (!temporaryAnnotation || activeAnnotation.naturalId !== temporaryAnnotation.naturalId) {\n    availableAnnotations.push(activeAnnotation);\n  }\n\n  if (temporaryAnnotation) {\n    availableAnnotations.push(temporaryAnnotation);\n  }\n\n  var _annotatedText$getPos = annotatedText.getPositionOfAnnotation(activeAnnotation),\n      _annotatedText$getPos2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_annotatedText$getPos, 2),\n      start = _annotatedText$getPos2[0],\n      length = _annotatedText$getPos2[1];\n\n  if (!start) {\n    return availableAnnotations;\n  }\n\n  var end = start + length;\n  var possibleAnnotations = [];\n\n  if (activeAnnotation.isInsertion) {\n    var insertionAnnotations = annotationPositions[\"i\" + start];\n\n    if (insertionAnnotations) {\n      possibleAnnotations = possibleAnnotations.concat(insertionAnnotations);\n    }\n\n    var activeInsertionAnnotations = annotationPositions[String(start)];\n\n    if (activeInsertionAnnotations) {\n      possibleAnnotations = possibleAnnotations.concat(activeInsertionAnnotations);\n    }\n  } else {\n    // Only include annotations if they encompass the whole annotation\n    // i.e. not if activeAnnotation is a user annotation and combines\n    // annotated text with normal text.\n    var startAnnotations = annotationPositions[String(start)];\n    var endAnnotations = annotationPositions[String(end)];\n\n    if (startAnnotations) {\n      possibleAnnotations = startAnnotations;\n    }\n\n    if (endAnnotations) {\n      possibleAnnotations = possibleAnnotations.concat(endAnnotations);\n    }\n  }\n\n  for (var i = 0; i < possibleAnnotations.length; i++) {\n    var annotation = possibleAnnotations[i];\n\n    if (annotation.start === activeAnnotation.start && annotation.length === activeAnnotation.length) {\n      // If an annotation is being edited, there will be a temporary annotation\n      // with the same natural id. If so, don't show the orignal version.\n      //\n      // We use natualId, as it normalises the id regardless of the original's\n      // save state. e.g. Upon editing a witness variant, a new annotation will be\n      // created. If the user is offline, that will not have been saved via the\n      // API yet. The user could then edit this new annotation, creating a temporary\n      // annotation based upon it. While this is being edited, the user could come\n      // back online and the save operation will succeed. This will mean the id of\n      // the temporary annotation will be different to the original edit, but naturalId\n      // will be the same.\n      if (!temporaryAnnotation || annotation.naturalId !== temporaryAnnotation.naturalId) {\n        availableAnnotations.push(annotation);\n      }\n    } else if (!annotatedText.activeWitness.isWorking) {\n      if (annotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.pageBreak || annotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.lineBreak) {\n        availableAnnotations.push(annotation);\n      }\n    }\n  }\n\n  availableAnnotations = lodash__WEBPACK_IMPORTED_MODULE_16___default().uniqWith(availableAnnotations, function (a, b) {\n    return a.id === b.id;\n  });\n  return availableAnnotations;\n};\n\nvar getTemporaryAnnotation = function getTemporaryAnnotation(state, type, user, witness, start, length) {\n  var annotations = reducers__WEBPACK_IMPORTED_MODULE_8__.getTemporaryAnnotations(state, witness.id, start, length, type);\n\n  if (annotations.length > 0) {\n    return annotations[0];\n  } else {\n    return null;\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  var user = reducers__WEBPACK_IMPORTED_MODULE_8__.getUser(state);\n  var selectedText = reducers__WEBPACK_IMPORTED_MODULE_8__.getSelectedText(state);\n  var activeAnnotation = ownProps.activeAnnotation;\n  var inline = ownProps.inline;\n  var selectedWitness = reducers__WEBPACK_IMPORTED_MODULE_8__.getSelectedTextWitness(state);\n\n  if (!selectedWitness) {\n    if (selectedText) {\n      selectedWitness = reducers__WEBPACK_IMPORTED_MODULE_8__.getWorkingWitness(state, selectedText.id);\n    }\n  }\n\n  if (!activeAnnotation || !selectedWitness) {\n    return {\n      annotationsData: null,\n      activeAnnotation: null,\n      baseAnnotation: null,\n      availableAnnotations: null,\n      user: user,\n      temporaryAnnotation: null,\n      inline: null,\n      firstSelectedSegment: null,\n      splitTextRect: null,\n      selectedWitness: null\n    };\n  }\n\n  var temporaryVariant = getTemporaryAnnotation(state, lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.variant, user, selectedWitness, activeAnnotation.start, activeAnnotation.length);\n  var annotations = getAvailableAnnotations(ownProps.annotatedText, activeAnnotation, temporaryVariant, ownProps.annotationPositions);\n  var variants = annotations.filter(function (annotation) {\n    return annotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.variant;\n  });\n  var sources = reducers__WEBPACK_IMPORTED_MODULE_8__.getSources(state);\n  var workingSourceName = reducers__WEBPACK_IMPORTED_MODULE_8__.getTranslation(state, \"annotation.workingEdition\", BASE_NAME);\n  var variantsData = getAnnotationsData(variants, sources, workingSourceName, selectedText);\n  var baseAnnotation = null;\n\n  if (activeAnnotation.id == lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID) {\n    baseAnnotation = activeAnnotation;\n  } else {\n    var _ownProps$annotatedTe = ownProps.annotatedText.getPositionOfAnnotation(activeAnnotation),\n        _ownProps$annotatedTe2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_ownProps$annotatedTe, 2),\n        start = _ownProps$annotatedTe2[0],\n        length = _ownProps$annotatedTe2[1];\n\n    if (start === null || length === null) {\n      variantsData = null;\n    } else {\n      baseAnnotation = ownProps.annotatedText.getBaseAnnotation(start, length);\n      var baseAnnotationData = getAnnotationsData([baseAnnotation], sources, workingSourceName);\n      variantsData = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(baseAnnotationData), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(variantsData));\n    }\n  } // make sure temporary annotation is first, then user created, then base annotation\n\n\n  if (variantsData) {\n    variantsData.sort(function (a, b) {\n      if (a.isTemporary) {\n        return -1;\n      } else if (b.isTemporary) {\n        return 1;\n      } else if (a.userCreated) {\n        return -1;\n      } else if (b.userCreated) {\n        return 1;\n      } else if (a.annotation.id && b.annotation.id) {\n        return a.annotation.id - b.annotation.id;\n      } else {\n        return 1;\n      }\n    });\n  }\n\n  var notes = annotations.filter(function (annotation) {\n    return annotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.note;\n  });\n  var temporaryNotes = reducers__WEBPACK_IMPORTED_MODULE_8__.getTemporaryAnnotations(state, selectedWitness.id, activeAnnotation.start, activeAnnotation.length, lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.note);\n  var questionAnnotations = annotations.filter(function (annotation) {\n    return annotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.question;\n  });\n  var questionsData = {};\n\n  if (questionAnnotations.length > 0) {\n    for (var i = 0; i < questionAnnotations.length; i++) {\n      var question = questionAnnotations[i];\n      questionsData[question.uniqueId] = {};\n      var isLoading = reducers__WEBPACK_IMPORTED_MODULE_8__.questionIsLoading(state, question);\n      questionsData[question.uniqueId][\"loading\"] = isLoading;\n      var questions = reducers__WEBPACK_IMPORTED_MODULE_8__.getQuestions(state, question.uniqueId);\n      questionsData[question.uniqueId][\"questions\"] = questions;\n    }\n  }\n\n  var temporaryQuestions = reducers__WEBPACK_IMPORTED_MODULE_8__.getTemporaryAnnotations(state, selectedWitness.id, activeAnnotation.start, activeAnnotation.length, lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.question);\n  var questionQuote = null;\n\n  if (temporaryQuestions.length > 0) {\n    var firstQuestion = temporaryQuestions[0];\n\n    var _ownProps$annotatedTe3 = ownProps.annotatedText.getPositionOfAnnotation(firstQuestion),\n        _ownProps$annotatedTe4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_ownProps$annotatedTe3, 2),\n        _start = _ownProps$annotatedTe4[0],\n        end = _ownProps$annotatedTe4[1];\n\n    if (_start) {\n      if (!end) {\n        end = _start + 1;\n      }\n\n      var _ownProps$annotatedTe5 = ownProps.annotatedText.segmentedText.extractTextAroundPosition(_start, end, [\"།\", \" \"]),\n          _ownProps$annotatedTe6 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_ownProps$annotatedTe5, 3),\n          startText = _ownProps$annotatedTe6[0],\n          mainText = _ownProps$annotatedTe6[1],\n          endText = _ownProps$annotatedTe6[2];\n\n      var linkUrl = document.location.href;\n      questionQuote = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"blockquote\", null, startText, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"a\", {\n        href: linkUrl\n      }, mainText), endText);\n    }\n  }\n\n  var fontSize = (0,reducers__WEBPACK_IMPORTED_MODULE_8__.getTextFontSize)(state);\n  return {\n    annotationsData: variantsData,\n    activeAnnotation: activeAnnotation,\n    baseAnnotation: baseAnnotation,\n    availableAnnotations: annotations,\n    user: user,\n    temporaryAnnotation: temporaryVariant,\n    inline: inline,\n    firstSelectedSegment: ownProps.firstSelectedSegment,\n    splitTextRect: ownProps.splitTextRect,\n    selectedWitness: selectedWitness,\n    notes: notes,\n    temporaryNotes: temporaryNotes,\n    questions: questionAnnotations,\n    temporaryQuestions: temporaryQuestions,\n    questionsData: questionsData,\n    questionQuote: questionQuote,\n    fontSize: fontSize\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {\n  var dispatch = dispatchProps.dispatch;\n\n  if (stateProps.questions.length > 0) {\n    for (var i = 0; i < stateProps.questions.length; i++) {\n      var question = stateProps.questions[i];\n      var loadQuestionData = true;\n\n      if (stateProps.questionsData.hasOwnProperty(question.uniqueId)) {\n        if (stateProps.questionsData[question.uniqueId].questions.length > 0 || stateProps.questionsData[question.uniqueId].loading) {\n          loadQuestionData = false;\n        }\n      }\n\n      if (loadQuestionData) {\n        dispatch(new actions__WEBPACK_IMPORTED_MODULE_9__.loadQuestion(question));\n      }\n    }\n  }\n\n  var addBreak = function addBreak(breakType) {\n    var selectBreak = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return function () {\n      var location = ownProps.activeAnnotation;\n      var breakAnnotation = new lib_Annotation__WEBPACK_IMPORTED_MODULE_11__[\"default\"](null, location.witness, location.end + 1, 0, null, breakType, stateProps.selectedWitness, stateProps.user);\n      var selectedWitnessData = reducers__WEBPACK_IMPORTED_MODULE_8__.dataFromWitness(stateProps.selectedWitness);\n      var actionsBatch = [];\n      actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.createdAnnotation(breakAnnotation));\n      actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.appliedAnnotation(breakAnnotation.uniqueId, selectedWitnessData));\n\n      if (selectBreak) {\n        actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.changedActiveTextAnnotation(breakAnnotation));\n      } else {\n        actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.changedActiveTextAnnotation(null));\n      }\n\n      dispatch((0,redux_batched_actions__WEBPACK_IMPORTED_MODULE_5__.batchActions)(actionsBatch));\n    };\n  };\n\n  var saveAnnotation = function saveAnnotation(selectedAnnotation, content) {\n    if (!selectedAnnotation.isTemporary) {\n      console.warn(\"Tried to save a non-temporary annotation: %o\", selectedAnnotation);\n      return;\n    }\n\n    var selectedWitness = stateProps.selectedWitness;\n    var selectedWitnessData = reducers__WEBPACK_IMPORTED_MODULE_8__.dataFromWitness(selectedWitness);\n    var newAnnotation = new lib_Annotation__WEBPACK_IMPORTED_MODULE_11__[\"default\"](selectedAnnotation.id, selectedAnnotation.witness, selectedAnnotation.start, selectedAnnotation.length, content, selectedAnnotation.type, selectedAnnotation.creatorWitness, stateProps.user, selectedAnnotation.uniqueId, selectedAnnotation.basedOn);\n    newAnnotation.isSaved = selectedAnnotation.isSaved;\n    var actionsBatch = [];\n    var action = null;\n\n    if (newAnnotation.isSaved) {\n      action = actions__WEBPACK_IMPORTED_MODULE_9__.updatedAnnotation;\n    } else {\n      action = actions__WEBPACK_IMPORTED_MODULE_9__.createdAnnotation;\n    }\n\n    actionsBatch.push(action(newAnnotation));\n    actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.removedTemporaryAnnotation(selectedAnnotation)); // TODO: figure out what needs changing to handle note annotations\n\n    actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.appliedAnnotation(newAnnotation.uniqueId, selectedWitnessData));\n\n    if (newAnnotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.variant) {\n      actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.changedActiveTextAnnotation(newAnnotation));\n    }\n\n    dispatch((0,redux_batched_actions__WEBPACK_IMPORTED_MODULE_5__.batchActions)(actionsBatch));\n  };\n\n  return _objectSpread(_objectSpread(_objectSpread({}, stateProps), ownProps), {}, {\n    closeAnnotation: function closeAnnotation() {\n      var activeAnnotation = stateProps.activeAnnotation;\n\n      if (activeAnnotation) {\n        var dismissTextAnnotation = actions__WEBPACK_IMPORTED_MODULE_9__.changedActiveTextAnnotation(null);\n        dispatch(dismissTextAnnotation);\n      }\n    },\n    didSelectAnnotation: function didSelectAnnotation(annotation) {\n      var selectedAnnotation = null;\n\n      if (annotation.id == lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID) {\n        selectedAnnotation = stateProps.baseAnnotation;\n      } else {\n        selectedAnnotation = lodash__WEBPACK_IMPORTED_MODULE_16___default().find(stateProps.availableAnnotations, function (value) {\n          return value.uniqueId == annotation.uniqueId;\n        }) || null;\n      }\n\n      var actionsBatch = [];\n      var selectedWitness = stateProps.selectedWitness; // let selectedWitnessData = reducers.getWitnessData(\n      //     state,\n      //     selectedWitness.id\n      // );\n\n      var selectedWitnessData = reducers__WEBPACK_IMPORTED_MODULE_8__.dataFromWitness(selectedWitness);\n\n      if (annotation.uniqueId != stateProps.activeAnnotation.uniqueId) {\n        if (selectedWitness.isWorking) {\n          if (annotation.id != lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID) {\n            actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.appliedAnnotation(selectedAnnotation.uniqueId, selectedWitnessData));\n          }\n\n          if (stateProps.activeAnnotation.id != lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID) {\n            actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.removedAppliedAnnotation(stateProps.activeAnnotation.uniqueId, selectedWitnessData));\n          }\n        } else {\n          if (stateProps.activeAnnotation.creatorWitness.id === selectedWitness.id) {\n            // Replacing a default annotation\n            // Currently selected annotation is a default\n            // annotation. So need to remove that then\n            // apply the newly selected annotation.\n            actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.removedDefaultAnnotation(stateProps.activeAnnotation.uniqueId, selectedWitnessData));\n\n            if (selectedAnnotation.id !== lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID) {\n              actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.appliedAnnotation(selectedAnnotation.uniqueId, selectedWitnessData));\n            }\n          } else {\n            if (selectedAnnotation.creatorWitness.id === selectedWitness.id) {\n              actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.appliedDefaultAnnotation(selectedAnnotation.uniqueId, selectedWitnessData));\n            } else if (selectedAnnotation.id !== lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID) {\n              actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.appliedAnnotation(selectedAnnotation.uniqueId, selectedWitnessData));\n            }\n\n            if (stateProps.activeAnnotation.id !== lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID) {\n              actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.removedAppliedAnnotation(stateProps.activeAnnotation.uniqueId, selectedWitnessData));\n            }\n          }\n        }\n\n        actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.changedActiveTextAnnotation(selectedAnnotation));\n        dispatch((0,redux_batched_actions__WEBPACK_IMPORTED_MODULE_5__.batchActions)(actionsBatch));\n      }\n    },\n    editAnnotation: function editAnnotation(selectedAnnotation) {\n      var basedOn = selectedAnnotation.isWorkingAnnotation || selectedAnnotation.userCreated || selectedAnnotation.id === lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_10__.BASE_ANNOTATION_ID ? null : selectedAnnotation;\n      var temporaryAnnotation = new lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.TemporaryAnnotation(basedOn, selectedAnnotation.witness, selectedAnnotation.start, selectedAnnotation.length, selectedAnnotation.content, selectedAnnotation.type, stateProps.selectedWitness, stateProps.user);\n\n      if (selectedAnnotation.userCreated) {\n        // user annotations are updated\n        temporaryAnnotation.uniqueId = selectedAnnotation.uniqueId;\n        temporaryAnnotation.isSaved = selectedAnnotation.isSaved;\n      }\n\n      dispatch(actions__WEBPACK_IMPORTED_MODULE_9__.addedTemporaryAnnotation(temporaryAnnotation, true));\n    },\n    saveAnnotation: saveAnnotation,\n    cancelEditAnnotation: function cancelEditAnnotation(selectedAnnotation) {\n      if (!selectedAnnotation.isTemporary) {\n        console.warn(\"Tried to call cancelEditAnnotation on a non-temporary annotation: %o\", selectedAnnotation);\n        return;\n      }\n\n      var cancelAction = actions__WEBPACK_IMPORTED_MODULE_9__.removedTemporaryAnnotation(selectedAnnotation);\n      dispatch(cancelAction);\n    },\n    deleteAnnotation: function deleteAnnotation(annotation) {\n      var selectedWitness = stateProps.selectedWitness;\n      var selectedWitnessData = reducers__WEBPACK_IMPORTED_MODULE_8__.dataFromWitness(selectedWitness);\n      var actionsBatch = [];\n\n      if (annotation.userCreated) {\n        var deleteAction = actions__WEBPACK_IMPORTED_MODULE_9__.deletedAnnotation(annotation, selectedWitness);\n        var removeAppliedAction = actions__WEBPACK_IMPORTED_MODULE_9__.removedAppliedAnnotation(annotation.uniqueId, selectedWitnessData);\n        actionsBatch = [deleteAction, removeAppliedAction];\n      } else {\n        // Assume this is a default annotation that was\n        // automatically imported from external data\n        var removeDefaultAnnotation = actions__WEBPACK_IMPORTED_MODULE_9__.removedDefaultAnnotation(annotation.uniqueId, selectedWitnessData);\n        actionsBatch = [removeDefaultAnnotation];\n      }\n\n      if (stateProps.activeAnnotation.uniqueId === annotation.uniqueId) {\n        actionsBatch.push(actions__WEBPACK_IMPORTED_MODULE_9__.changedActiveTextAnnotation(null));\n      }\n\n      dispatch((0,redux_batched_actions__WEBPACK_IMPORTED_MODULE_5__.batchActions)(actionsBatch));\n    },\n    addNote: function addNote() {\n      var activeAnnotation = ownProps.activeAnnotation;\n      var temporaryAnnotation = new lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.TemporaryAnnotation(null, activeAnnotation.witness, activeAnnotation.start, activeAnnotation.length, \"\", lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.note, stateProps.selectedWitness, stateProps.user);\n      dispatch(actions__WEBPACK_IMPORTED_MODULE_9__.addedTemporaryAnnotation(temporaryAnnotation, true));\n    },\n    editNote: function editNote(note) {\n      var temporaryAnnotation = new lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.TemporaryAnnotation(note, note.witness, note.start, note.length, note.content, lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.note, stateProps.selectedWitness, stateProps.user);\n      dispatch(actions__WEBPACK_IMPORTED_MODULE_9__.addedTemporaryAnnotation(temporaryAnnotation, true));\n    },\n    addPageBreak: addBreak(lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.pageBreak),\n    addLineBreak: addBreak(lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.lineBreak),\n    addQuestion: function addQuestion() {\n      var activeAnnotation = ownProps.activeAnnotation;\n      var temporaryAnnotation = new lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.TemporaryAnnotation(null, activeAnnotation.witness, activeAnnotation.start, activeAnnotation.length, \"\", lib_Annotation__WEBPACK_IMPORTED_MODULE_11__.ANNOTATION_TYPES.question, stateProps.selectedWitness, stateProps.user);\n      dispatch(actions__WEBPACK_IMPORTED_MODULE_9__.addedTemporaryAnnotation(temporaryAnnotation, true));\n    },\n    saveQuestion: function saveQuestion(question, title, content) {\n      var _ownProps$annotatedTe7 = ownProps.annotatedText.getPositionOfAnnotation(question),\n          _ownProps$annotatedTe8 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_ownProps$annotatedTe7, 2),\n          start = _ownProps$annotatedTe8[0],\n          end = _ownProps$annotatedTe8[1];\n\n      var questionQuoteText = react_dom_server__WEBPACK_IMPORTED_MODULE_17__.renderToStaticMarkup(stateProps.questionQuote);\n      var questionText = questionQuoteText + content;\n      saveAnnotation(question, content);\n      var createdQuestionAction = actions__WEBPACK_IMPORTED_MODULE_9__.createdQuestion(question, title, questionText);\n      dispatch(createdQuestionAction);\n    }\n  });\n};\n\nvar AnnotationControlsContainer = (0,react_redux__WEBPACK_IMPORTED_MODULE_4__.connect)(mapStateToProps, null, mergeProps)(_AnnotationControls__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnnotationControlsContainer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/components/TextDetail/AnnotationControlsContainer.js\n");

/***/ }),

/***/ "./app/lib/SplitText.js":
/*!******************************!*\
  !*** ./app/lib/SplitText.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SplitText)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _SegmentedText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SegmentedText */ \"./app/lib/SegmentedText.js\");\n/* harmony import */ var _AnnotatedText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AnnotatedText */ \"./app/lib/AnnotatedText.js\");\n\n\n\n\n\nvar SplitText = /*#__PURE__*/function () {\n  function SplitText(annotatedText, splitter) {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, SplitText);\n\n    this.annotatedText = annotatedText;\n    this.splitter = splitter;\n    this._texts = null;\n    this._textsId = null;\n    this._textsFinalPositions = [];\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(SplitText, [{\n    key: \"texts\",\n    get: function get() {\n      if (!this.annotatedText) {\n        return [];\n      }\n\n      if (!this._texts || this._textsId !== this.annotatedText.getUniqueId()) {\n        this._textsFinalPositions = [];\n        var segmentedText = this.annotatedText.segmentedText;\n        var textString = segmentedText.getText();\n        var splitPositions = this.splitter(textString).filter(function (l) {\n          return l !== 0;\n        });\n\n        if (splitPositions.length === 0) {\n          this._textsFinalPositions.push(textString.length);\n\n          return [segmentedText];\n        }\n\n        var lastPosition = splitPositions[splitPositions.length - 1];\n\n        if (lastPosition + 1 < textString.length) {\n          splitPositions.push(textString.length - 1);\n        }\n\n        var segments = segmentedText.segments;\n        var startIndex = 0;\n        var texts = [];\n\n        for (var i = 0; i < splitPositions.length; i++) {\n          var position = splitPositions[i];\n          var endIndex = segmentedText.indexOfSegmentAtPosition(position - 1);\n          var textSegments = void 0;\n\n          if (i == splitPositions.length - 1) {\n            // final position\n            textSegments = segments.slice(startIndex);\n          } else {\n            textSegments = segments.slice(startIndex, endIndex + 1);\n          }\n\n          var text = new _SegmentedText__WEBPACK_IMPORTED_MODULE_2__[\"default\"](textSegments);\n          texts.push(text);\n          startIndex = endIndex + 1;\n\n          if (endIndex >= 0) {\n            var finalSegment = segments[endIndex];\n\n            this._textsFinalPositions.push(finalSegment.end);\n          }\n        }\n\n        this._texts = texts.filter(function (l) {\n          return l.segments.length > 0;\n        });\n        this._textsId = this.annotatedText.getUniqueId();\n      }\n\n      return this._texts || [];\n    }\n  }, {\n    key: \"getTextsFinalPositions\",\n    value: function getTextsFinalPositions() {\n      this.texts;\n      return this._textsFinalPositions;\n    }\n    /**\r\n     * Return the index of the text portion that contains the given position.\r\n     *\r\n     * @param position\r\n     * @returns number\r\n     */\n\n  }, {\n    key: \"getTextIndexOfPosition\",\n    value: function getTextIndexOfPosition(position) {\n      var textsFinalPositions = this.getTextsFinalPositions();\n      var lastPosition = 0;\n      var textIndex = null;\n\n      for (var i = 0; i < textsFinalPositions.length; i++) {\n        var endPosition = textsFinalPositions[i];\n\n        if (position >= lastPosition && position <= endPosition) {\n          textIndex = i;\n          break;\n        }\n\n        lastPosition = endPosition;\n      }\n\n      if (textIndex === null) {\n        // Likely an insertion at the end of a text\n        console.warn(\"no index for position %d\", position);\n        textIndex = textsFinalPositions.length - 1;\n      }\n\n      return textIndex;\n    }\n  }]);\n\n  return SplitText;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/lib/SplitText.js\n");

/***/ })

}]);