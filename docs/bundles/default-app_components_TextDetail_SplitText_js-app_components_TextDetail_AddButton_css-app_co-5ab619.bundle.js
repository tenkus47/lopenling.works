/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkteminusclient"] = self["webpackChunkteminusclient"] || []).push([["default-app_components_TextDetail_SplitText_js-app_components_TextDetail_AddButton_css-app_co-5ab619"],{

/***/ "./app/components/TextDetail/SplitText.js":
/*!************************************************!*\
  !*** ./app/components/TextDetail/SplitText.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SplitTextComponent)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var react_virtualized_dist_es_AutoSizer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-virtualized/dist/es/AutoSizer */ \"./node_modules/react-virtualized/dist/es/AutoSizer/index.js\");\n/* harmony import */ var react_virtualized_dist_es_List__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-virtualized/dist/es/List */ \"./node_modules/react-virtualized/dist/es/List/index.js\");\n/* harmony import */ var images_lopenling_logo_png__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! images/lopenling_logo.png */ \"./app/images/lopenling_logo.png\");\n/* harmony import */ var react_virtualized_dist_es_CellMeasurer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-virtualized/dist/es/CellMeasurer */ \"./node_modules/react-virtualized/dist/es/CellMeasurer/index.js\");\n/* harmony import */ var react_virtualized_styles_css__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react-virtualized/styles.css */ \"./node_modules/react-virtualized/styles.css\");\n/* harmony import */ var react_virtualized_styles_css__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(react_virtualized_styles_css__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _Text__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Text */ \"./app/components/TextDetail/Text.js\");\n/* harmony import */ var lib_SplitText__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lib/SplitText */ \"./app/lib/SplitText.js\");\n/* harmony import */ var lib_SegmentedText__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lib/SegmentedText */ \"./app/lib/SegmentedText.js\");\n/* harmony import */ var lib_shallowEqual__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lib/shallowEqual */ \"./app/lib/shallowEqual.js\");\n/* harmony import */ var _AnnotationControls__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./AnnotationControls */ \"./app/components/TextDetail/AnnotationControls.js\");\n/* harmony import */ var _AnnotationControlsContainer__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./AnnotationControlsContainer */ \"./app/components/TextDetail/AnnotationControlsContainer.js\");\n/* harmony import */ var _SplitText_css__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./SplitText.css */ \"./app/components/TextDetail/SplitText.css\");\n/* harmony import */ var _SplitText_css__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_SplitText_css__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var _AnnotationControls_css__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./AnnotationControls.css */ \"./app/components/TextDetail/AnnotationControls.css\");\n/* harmony import */ var _AnnotationControls_css__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(_AnnotationControls_css__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! lib/TextSegment */ \"./app/lib/TextSegment.js\");\n/* harmony import */ var lib_Annotation__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! lib/Annotation */ \"./app/lib/Annotation.js\");\n/* harmony import */ var lib_Witness__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! lib/Witness */ \"./app/lib/Witness.js\");\n/* harmony import */ var grapheme_splitter__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! grapheme-splitter */ \"./node_modules/grapheme-splitter/index.js\");\n/* harmony import */ var grapheme_splitter__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(grapheme_splitter__WEBPACK_IMPORTED_MODULE_27__);\n/* harmony import */ var react_zoom_pan_pinch__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! react-zoom-pan-pinch */ \"./node_modules/react-zoom-pan-pinch/dist/index.esm.js\");\n\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MIN_SPACE_RIGHT = parseInt((_AnnotationControls_css__WEBPACK_IMPORTED_MODULE_22___default().inlineWidth)) + _AnnotationControls__WEBPACK_IMPORTED_MODULE_19__.CONTROLS_MARGIN_LEFT;\nvar IMAGE_URL_PREFIX = \"//iiif.bdrc.io/\";\nvar IMAGE_URL_SUFFIX = \"/full/full/0/default.jpg\";\nvar IMAGE_START_PRE_KEY = \"bdrcimg_pre\";\nvar IMAGE_START_NUMBER_KEY = \"bdrcimg_number\";\nvar IMAGE_START_SUFFIX_KEY = \"bdrcimg_suffix\";\nvar _searchResultsCache = {};\n\nfunction HttpUrl() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  if (data.includes(\"https\")) return data;\n  return \"https://\" + data;\n}\n\nvar SplitTextComponent = /*#__PURE__*/function (_React$PureComponent) {\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(SplitTextComponent, _React$PureComponent);\n\n  var _super = _createSuper(SplitTextComponent);\n\n  // Whether the mouse button is down\n  function SplitTextComponent(props) {\n    var _this;\n\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, SplitTextComponent);\n\n    _this = _super.call(this, props);\n    _this.textAlignmentById = [];\n    _this.childRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createRef(\"0\");\n    _this.list = null;\n    _this.splitText = null;\n    _this.cache = new react_virtualized_dist_es_CellMeasurer__WEBPACK_IMPORTED_MODULE_13__.CellMeasurerCache({\n      fixedWidth: true\n    });\n    _this.imageAlignmentById = _this.props.imageAlignmentById;\n    _this.changeImageScrollId = _this.props.changeImageScrollId;\n    _this.splitTextRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createRef(null);\n    _this.rowRenderer = _this.rowRenderer.bind((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_this));\n    _this.textListVisible = props.textListVisible;\n    _this.editMenuVisible = props.editMenuVisible;\n    _this.isPanelLinked = props.isPanelLinked;\n    _this.activeSelection = null;\n    _this.selectedNodes = null;\n    _this._mouseDown = false;\n    _this._activeWitness = null;\n    _this._didSetInitialScrollPosition = false;\n    _this._modifyingSelection = false;\n    _this.imageHeight = null;\n    _this.imageWidth = null;\n    _this.calculatedImageHeight = null;\n\n    _this.processProps(props);\n\n    _this.changeScrollToId = props.changeScrollToId;\n    _this.changeSyncIdOnClick = props.changeSyncIdOnClick;\n    _this.closeAnnotation = props.closeAnnotation;\n    _this.scrollJump = props.scrollJump;\n    _this.textAlignmentById = [];\n    _this.scrollEvent = _this.scrollEvent.bind((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_this));\n    _this.selectedWindow = props.selectedWindow;\n    _this.changeImageScrollId = props.changeImageScrollId;\n    _this.imageData = props.imageData;\n    return _this;\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(SplitTextComponent, [{\n    key: \"scrollEvent\",\n    value: function scrollEvent(e) {\n      if (this.selectedWindow === 2) return null;\n\n      if (this.selectedWindow === 1 && this.isPanelLinked) {\n        var list = [];\n        var imageIdList = [];\n        this.textAlignmentById.map(function (l) {\n          var number = document.getElementById(\"s_\" + l.start);\n\n          if (number) {\n            var _position = number.getBoundingClientRect();\n\n            if (_position.top > 102) {\n              list.push({\n                id: l.id,\n                start: l.start,\n                target: l.TStart\n              });\n            }\n          }\n        });\n        this.imageAlignmentById.map(function (l) {\n          var number = document.getElementById(\"s_\" + (l === null || l === void 0 ? void 0 : l.start));\n\n          if (number) {\n            var _position2 = number.getBoundingClientRect();\n\n            if (_position2.top > 102) {\n              imageIdList.push({\n                id: l.id,\n                start: l.start,\n                end: l.end\n              });\n            }\n          }\n        });\n\n        if (!lodash__WEBPACK_IMPORTED_MODULE_23___default().isEmpty(list) || !lodash__WEBPACK_IMPORTED_MODULE_23___default().isEmpty(imageIdList)) {\n          if (this.selectedWindow === 1) {\n            this.debouncedScroll(list, imageIdList);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateList\",\n    value: function updateList() {\n      var resetCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var resetRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (this.props.showImages && !this.calculatedImageHeight && this.imageHeight && this.imageWidth) {\n        this.calculatedImageHeight = this.calculateImageHeight();\n      }\n\n      if (this.list) {\n        var list = this.list;\n\n        if (resetCache) {\n          if (resetRows !== null) {\n            if (!Array.isArray(resetRows)) {\n              this.cache.clear(resetRows);\n            } else if (Array.isArray(resetRows)) {\n              for (var i = 0; i < resetRows.length; i++) {\n                var resetRow = resetRows[i];\n                this.cache.clear(resetRow);\n              }\n            }\n          } else {\n            this.cache.clearAll();\n            list.measureAllRows();\n            list.recomputeRowHeights(0);\n          }\n        }\n\n        list.forceUpdateGrid();\n      }\n    }\n  }, {\n    key: \"mouseDown\",\n    value: function mouseDown() {\n      this._mouseDown = true;\n    }\n  }, {\n    key: \"mouseUp\",\n    value: function mouseUp() {\n      this._mouseDown = false;\n\n      if (this.activeSelection) {\n        var _segmentIds = this.processSelection(this.activeSelection);\n\n        if (!_segmentIds) {\n          _segmentIds = [];\n        }\n\n        this.props.didSelectSegmentIds(_segmentIds);\n        this.activeSelection = null;\n      }\n    }\n  }, {\n    key: \"handleSelection\",\n    value: function handleSelection(e) {\n      if (!this._modifyingSelection) {\n        this.activeSelection = document.getSelection();\n\n        if (!this._mouseDown) {\n          // sometimes, this gets called after the mouseDown event handler\n          this.mouseUp();\n        }\n      } else {\n        e.stopPropagation(); // Need to set this here. If set at callsite, the event will not\n        // have time to propagate.\n\n        this._modifyingSelection = false;\n      }\n    }\n  }, {\n    key: \"processSelection\",\n    value: function processSelection(selection) {\n      if (selection.rangeCount === 0 || selection.isCollapsed || selection.type === \"Caret\") {\n        this.selectedNodes = null;\n        return null;\n      }\n\n      var range = selection.getRangeAt(0);\n      var start = range.startContainer;\n      var startSpan = this.getNodeSegmentSpan(start);\n\n      if (!(startSpan && startSpan.parentNode)) {\n        // If the selection is not a text segment, ignore.\n        // Assuming if the first node is a non-segment, they\n        // all are.\n        return null;\n      }\n\n      var nodes = this.getRangeNodes(range, startSpan.parentNode); // Check if the selection starts after the end of a node, and\n      // if so remove that node.\n\n      if (nodes.length > 0) {\n        var firstNode = nodes[0];\n\n        if (range.startOffset === firstNode.textContent.length) {\n          nodes.shift();\n        }\n      }\n\n      var end = range.endContainer;\n      var endSpan = this.getNodeSegmentSpan(end);\n\n      if (!(endSpan && endSpan.parentNode)) {\n        return null;\n      }\n\n      if (endSpan && startSpan.parentNode !== endSpan.parentNode) {\n        // Selection is spanning Texts.\n        // We assume a selection can only run across a maximum\n        // of two Texts.\n        nodes = nodes.concat(this.getRangeNodes(range, endSpan.parentNode));\n      } else {\n        // Check if the selection ends before the start of a node, and\n        // if so remove that node.\n        if (range.endOffset === 0) {\n          nodes.pop();\n        }\n      }\n\n      this.selectedNodes = nodes;\n      var nodeIds = [];\n      nodes.reduce(function (accumulator, current) {\n        if (current instanceof Element) {\n          accumulator.push(current.id);\n        }\n\n        return accumulator;\n      }, nodeIds);\n      return nodeIds;\n    }\n  }, {\n    key: \"getNodeSegmentSpan\",\n    value: function getNodeSegmentSpan(node) {\n      var currentNode = node;\n      var span = null;\n      var test = /^(i|s|ds)_/;\n\n      while (!span && currentNode.parentNode) {\n        if (currentNode instanceof Element && test.test(currentNode.id)) {\n          span = currentNode;\n        }\n\n        currentNode = currentNode.parentNode;\n      }\n\n      return span;\n    }\n  }, {\n    key: \"getRangeNodes\",\n    value: function getRangeNodes(range, parentNode) {\n      var rangeSpans = [];\n\n      for (var i = 0, len = parentNode.childNodes.length; i < len; i++) {\n        var node = parentNode.childNodes[i]; // TODO: add polyfill for i.e.?\n        // e.g. https://gist.github.com/jonathansampson/6d09bd6d2e8c22c53868aec42e66b0f9\n\n        if (range.intersectsNode(node)) {\n          rangeSpans.push(node);\n        }\n      }\n\n      return rangeSpans;\n    }\n  }, {\n    key: \"getControlsMeasurements\",\n    value: function getControlsMeasurements(props) {\n      if (!this.splitText) {\n        return null;\n      }\n\n      var splitTextComponent = this.splitText;\n      var selectedTextIndex = null;\n      var firstSelectedSegment = null;\n      var selectedElementId = null;\n      var splitTextRect = null;\n      var segmentIdFunction = null;\n      var selectedElementIds = [];\n      var startPos = 0;\n\n      if (props.activeAnnotation) {\n        var activeAnnotation = props.activeAnnotation;\n\n        var _props$splitText$anno = props.splitText.annotatedText.getPositionOfAnnotation(activeAnnotation);\n\n        var _props$splitText$anno2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_props$splitText$anno, 1);\n\n        startPos = _props$splitText$anno2[0];\n\n        if (startPos === null) {\n          console.warn(\"No startPos in getControlsMeasurements\");\n          return null;\n        }\n\n        if (activeAnnotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_25__.ANNOTATION_TYPES.pageBreak) {\n          startPos -= 1;\n        }\n\n        if (activeAnnotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_25__.ANNOTATION_TYPES.lineBreak) {\n          startPos -= 1;\n        } // Index of text containing end of annotation\n\n\n        var positionEnd = startPos + activeAnnotation.length;\n        if (activeAnnotation.length > 0) positionEnd -= 1;\n        selectedTextIndex = props.splitText.getTextIndexOfPosition(positionEnd);\n        splitTextRect = splitTextComponent.getBoundingClientRect();\n      }\n\n      var selectedAnnotatedSegments = [];\n\n      if (props.selectedAnnotatedSegments && props.selectedAnnotatedSegments.length > 0) {\n        selectedAnnotatedSegments = props.selectedAnnotatedSegments;\n\n        for (var i = 0; i < selectedAnnotatedSegments.length; i++) {\n          var _segment = selectedAnnotatedSegments[i];\n\n          if (firstSelectedSegment === null && _segment instanceof lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"]) {\n            firstSelectedSegment = _segment;\n            break;\n          }\n        }\n\n        if (firstSelectedSegment) {\n          if (firstSelectedSegment.length === 0 && props.activeAnnotation && props.activeAnnotation.isInsertion) {\n            selectedElementId = (0,_Text__WEBPACK_IMPORTED_MODULE_15__.idForInsertion)(firstSelectedSegment);\n            segmentIdFunction = _Text__WEBPACK_IMPORTED_MODULE_15__.idForInsertion;\n          } else {\n            selectedElementId = (0,_Text__WEBPACK_IMPORTED_MODULE_15__.idForSegment)(firstSelectedSegment);\n            segmentIdFunction = _Text__WEBPACK_IMPORTED_MODULE_15__.idForSegment;\n          }\n        }\n      } else if (props.activeAnnotation) {\n        if (props.activeAnnotation.isDeletion) {\n          var _segment2 = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"](startPos, \"\");\n\n          selectedElementId = (0,_Text__WEBPACK_IMPORTED_MODULE_15__.idForDeletedSegment)(_segment2);\n          segmentIdFunction = _Text__WEBPACK_IMPORTED_MODULE_15__.idForDeletedSegment;\n          firstSelectedSegment = _segment2;\n          selectedAnnotatedSegments = [firstSelectedSegment];\n        } else if (props.activeAnnotation.isInsertion) {\n          var _props$splitText$anno3 = props.splitText.annotatedText.getPositionOfAnnotation(props.activeAnnotation),\n              _props$splitText$anno4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_props$splitText$anno3, 1),\n              start = _props$splitText$anno4[0];\n\n          if (start) {\n            var _segment3 = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"](start, \"\");\n\n            selectedElementId = (0,_Text__WEBPACK_IMPORTED_MODULE_15__.idForInsertion)(_segment3);\n            segmentIdFunction = _Text__WEBPACK_IMPORTED_MODULE_15__.idForInsertion;\n            firstSelectedSegment = _segment3;\n            selectedAnnotatedSegments = [firstSelectedSegment];\n          }\n        } else if (props.activeAnnotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_25__.ANNOTATION_TYPES.pageBreak) {\n          var _segment4 = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"](startPos + 1, \"\");\n\n          var prevSegment = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"](startPos, \"\");\n          selectedElementId = (0,_Text__WEBPACK_IMPORTED_MODULE_15__.idForPageBreak)(prevSegment);\n          firstSelectedSegment = _segment4;\n          selectedAnnotatedSegments = [_segment4];\n          selectedElementIds = [selectedElementId];\n        } else if (props.activeAnnotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_25__.ANNOTATION_TYPES.lineBreak) {\n          var _segment5 = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"](startPos + 1, \"\");\n\n          var _prevSegment = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"](startPos, \"\");\n\n          selectedElementId = (0,_Text__WEBPACK_IMPORTED_MODULE_15__.idForLineBreak)(_prevSegment);\n          firstSelectedSegment = _segment5;\n          selectedAnnotatedSegments = [_segment5];\n          selectedElementIds = [selectedElementId];\n        }\n      }\n\n      if (segmentIdFunction) {\n        for (var _i = 0; _i < selectedAnnotatedSegments.length; _i++) {\n          var _segment6 = selectedAnnotatedSegments[_i];\n\n          if (_segment6 instanceof lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"]) {\n            var _segmentId = segmentIdFunction(_segment6);\n\n            selectedElementIds.push(_segmentId);\n          }\n        }\n      }\n\n      if (selectedTextIndex != null && firstSelectedSegment && selectedElementId && splitTextRect) {\n        return {\n          selectedTextIndex: selectedTextIndex,\n          firstSelectedSegment: firstSelectedSegment,\n          selectedElementId: selectedElementId,\n          splitTextRect: splitTextRect,\n          selectedElementIds: selectedElementIds\n        };\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"shouldResetListCache\",\n    value: function shouldResetListCache(oldProps, newProps) {\n      var shouldReset = false;\n\n      if (oldProps.showImages !== newProps.showImages || this.pageBreaksChanged(oldProps, newProps)) {\n        shouldReset = true;\n      }\n\n      return shouldReset;\n    }\n  }, {\n    key: \"pageBreaksChanged\",\n    value: function pageBreaksChanged(oldProps, newProps) {\n      var oldTextBreaks = oldProps.splitText.getTextsFinalPositions();\n      var newTextBreaks = newProps.splitText.getTextsFinalPositions();\n      if (oldTextBreaks.length !== newTextBreaks.length) return true;\n      return JSON.stringify(oldTextBreaks) !== JSON.stringify(newTextBreaks);\n    }\n  }, {\n    key: \"lineBreaksChanges\",\n    value: function lineBreaksChanges(oldProps, newProps) {\n      var oldActiveAnnotation = oldProps.activeAnnotation;\n      var newActiveAnnotation = newProps.activeAnnotation;\n      var hasChanged = false;\n\n      if (oldActiveAnnotation && oldActiveAnnotation.isType(lib_Annotation__WEBPACK_IMPORTED_MODULE_25__.ANNOTATION_TYPES.lineBreak) && newProps.activeAnnotations && !newProps.activeAnnotations.hasOwnProperty(oldActiveAnnotation.uniqueId)) {\n        hasChanged = true;\n      }\n\n      if (newActiveAnnotation && newActiveAnnotation.isType(lib_Annotation__WEBPACK_IMPORTED_MODULE_25__.ANNOTATION_TYPES.lineBreak) && oldProps.activeAnnotations && !oldProps.activeAnnotations.hasOwnProperty(newActiveAnnotation.uniqueId)) {\n        hasChanged = true;\n      }\n\n      return hasChanged;\n    }\n  }, {\n    key: \"selectedListRow\",\n    value: function selectedListRow(props) {\n      var row = null;\n\n      if (props.activeAnnotation) {\n        row = props.splitText.getTextIndexOfPosition(props.activeAnnotation.start);\n      }\n\n      return row;\n    }\n  }, {\n    key: \"processProps\",\n    value: function processProps(props) {\n      var _this2 = this;\n\n      var changedWitness = false;\n\n      if (!this.props.selectedWitness || props.selectedWitness && props.selectedWitness.id !== this.props.selectedWitness.id) {\n        changedWitness = true;\n        this._didSetInitialScrollPosition = false;\n      }\n\n      if (props.selectedSearchResult && (!this.props.selectedSearchResult || props.selectedSearchResult.start !== this.props.selectedSearchResult.start || props.selectedSearchResult.textId !== this.props.selectedSearchResult.textId)) {\n        console.log(\"resetting scroll position from search result\");\n        this._didSetInitialScrollPosition = false;\n      } // TODO: check if new selectedSearchResult and if so\n      // set this._didSetInitialScrollPosition = false\n      // make sure there's no numbers in selectedAnnotatedSegments\n      // as we want to pass it to Text which only expects TextSegments\n\n\n      this._filteredSelectedAnnotatedSegments = props.selectedAnnotatedSegments.reduce(function (acc, current) {\n        if (current instanceof lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"]) acc.push(current);\n        return acc;\n      }, []);\n      var controlsMeasurements = this.getControlsMeasurements(props);\n\n      if (controlsMeasurements) {\n        this.selectedTextIndex = controlsMeasurements.selectedTextIndex;\n        this.firstSelectedSegment = controlsMeasurements.firstSelectedSegment;\n        this.splitTextRect = controlsMeasurements.splitTextRect;\n        this.selectedElementId = controlsMeasurements.selectedElementId;\n        this.selectedElementIds = controlsMeasurements.selectedElementIds;\n      }\n\n      if (props.textListVisible !== this.textListVisible || props.editMenuVisible !== this.editMenuVisible) {\n        setTimeout(function () {\n          _this2.textListVisible = props.textListVisible;\n          _this2.editMenuVisible = props.editMenuVisible;\n\n          _this2.updateList(true);\n        }, 500);\n      } else {\n        if (changedWitness) {\n          this.updateList(true);\n        } else if (this.pageBreaksChanged(this.props, props)) {\n          var selectedRows = null;\n          var currentSelectedRow = this.selectedListRow(this.props);\n          var newSelectedRow = this.selectedListRow(props);\n\n          if (currentSelectedRow && newSelectedRow) {\n            var firstChangedRow = currentSelectedRow > newSelectedRow ? newSelectedRow : currentSelectedRow;\n            var splitRowTexts = this.props.splitText.texts;\n            selectedRows = [];\n\n            for (var i = firstChangedRow, len = splitRowTexts.length; i < len; i++) {\n              selectedRows.push(i);\n            }\n          }\n\n          this.updateList(true, selectedRows);\n        } else if (this.lineBreaksChanges(this.props, props)) {\n          var selectedRow = this.selectedListRow(props);\n          if (!selectedRow) selectedRow = this.selectedListRow(this.props);\n          var _splitRowTexts = this.props.splitText.texts;\n          var _selectedRows = [];\n\n          if (selectedRow !== null) {\n            for (var _i2 = selectedRow, _len = _splitRowTexts.length; _i2 < _len; _i2++) {\n              _selectedRows.push(_i2);\n            }\n\n            this.updateList(true, _selectedRows);\n          }\n        } else if (this.props.fontSize !== props.fontSize) {\n          this.updateList(true);\n        } else if (this.props.activeAnnotation && props.activeAnnotation && this.annotationsInSameLocation(this.props.activeAnnotation, props.activeAnnotation)) {\n          this.updateList(true, this.selectedListRow(props));\n        } else {\n          this.updateList(this.shouldResetListCache(this.props, props));\n        }\n      }\n    }\n  }, {\n    key: \"annotationsInSameLocation\",\n    value: function annotationsInSameLocation(anno1, anno2) {\n      if (anno1.start === anno2.start && anno1.length === anno2.length) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(props) {\n      this.processProps(props);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this.resizeHandler = lodash__WEBPACK_IMPORTED_MODULE_23___default().throttle(function () {\n        _this3.calculatedImageHeight = null;\n\n        _this3.updateList();\n      }, 600).bind(this);\n      this.debouncedScroll = lodash__WEBPACK_IMPORTED_MODULE_23___default().debounce(function (list, imagelist) {\n        if (list.length) {\n          var _list$;\n\n          _this3.changeScrollToId({\n            id: (_list$ = list[0]) === null || _list$ === void 0 ? void 0 : _list$.start,\n            from: 1\n          });\n        }\n\n        if (imagelist.length) {\n          var _imagelist$, _imagelist$2;\n\n          _this3.changeImageScrollId({\n            id: {\n              start: (_imagelist$ = imagelist[0]) === null || _imagelist$ === void 0 ? void 0 : _imagelist$.start,\n              end: (_imagelist$2 = imagelist[0]) === null || _imagelist$2 === void 0 ? void 0 : _imagelist$2.end\n            },\n            from: 1\n          });\n        }\n      }, 1000);\n      window.addEventListener(\"resize\", this.resizeHandler);\n      this.selectionHandler = lodash__WEBPACK_IMPORTED_MODULE_23___default().debounce(function (e) {\n        _this3.handleSelection(e);\n      }, 200).bind(this);\n      document.addEventListener(\"selectionchange\", this.selectionHandler);\n      document.addEventListener(\"mousedown\", this.mouseDown.bind(this), true);\n      document.addEventListener(\"mouseup\", this.mouseUp.bind(this), true);\n      this.processProps(this.props);\n      this.timer = setTimeout(function () {\n        _this3.resizeHandler();\n      }, 2000);\n      this.componentDidUpdate();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props,\n          _this$props2,\n          _this4 = this;\n\n      this.imageData = this.props.imageData;\n\n      if (this.imageData !== (prevProps === null || prevProps === void 0 ? void 0 : prevProps.imageData)) {\n        this.calculatedImageHeight = null;\n        this.updateList(true);\n      }\n\n      var Alignment = this.props.textAlignment;\n      this.imageAlignmentById = this.props.imageAlignmentById;\n      this.SearchSyncId = this.props.syncIdOnSearch || null;\n      this.condition = this.props.condition;\n      var scrollToId = this.props.scrollToId;\n      var list = this.list;\n      var con = (prevProps === null || prevProps === void 0 ? void 0 : prevProps.searchResults) !== ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.searchResults) || (prevProps === null || prevProps === void 0 ? void 0 : prevProps.syncIdOnSearch) !== ((_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.syncIdOnSearch); // scroll to word searched using search input\n\n      if (con && this.props.searchResults) {\n        if (this.SearchSyncId) {\n          var selectedTextIndex = this.props.splitText.getTextIndexOfPosition(this.SearchSyncId);\n          setTimeout(function () {\n            list.scrollToRow(selectedTextIndex);\n            setTimeout(function () {\n              list.scrollToPosition(list.props.scrollTop - 300);\n            }, 0);\n          }, 100);\n        }\n      }\n\n      this.textAlignmentById = this.props.textAlignmentById;\n      this.isPanelLinked = this.props.isPanelLinked;\n      this.selectedWindow = this.props.selectedWindow;\n      this.targetId = this.props.syncIdOnClick;\n\n      if (this.selectedNodes && this.selectedNodes.length > 0) {\n        var selectedNodes = this.selectedNodes;\n        var selectedSegments = this.props.selectedAnnotatedSegments;\n        setTimeout(function () {\n          var selRange = document.createRange();\n          var startNode = selectedNodes[0];\n          var endNode = selectedNodes[selectedNodes.length - 1];\n          var lastSegment = selectedSegments[selectedSegments.length - 1];\n\n          if (lastSegment instanceof lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"]) {\n            var lastElement = document.getElementById((0,_Text__WEBPACK_IMPORTED_MODULE_15__.idForSegment)(lastSegment));\n            if (lastElement) endNode = lastElement;\n          }\n\n          if (startNode instanceof Element && endNode instanceof Element) {\n            startNode = document.getElementById(startNode.id);\n            endNode = document.getElementById(endNode.id);\n\n            if (startNode && endNode) {\n              selRange.setStart(startNode, 0);\n              selRange.setEnd(endNode, endNode.childNodes.length);\n              var sel = document.getSelection();\n\n              if (sel) {\n                _this4._modifyingSelection = true;\n                sel.removeAllRanges();\n                sel.addRange(selRange);\n                _this4.selectedNodes = null;\n              }\n            }\n          }\n        }, 0);\n      }\n\n      if (!this._didSetInitialScrollPosition && this.list) {\n        var _list = this.list;\n\n        if (this.props.activeAnnotation || this.props.selectedSearchResult) {\n          var _selectedTextIndex = this.getSelectedTextIndex();\n\n          setTimeout(function () {\n            _list.scrollToRow(_selectedTextIndex); // scrollToRow often positions the annotation at the\n            // bottom of the screen, so scroll up a bit\n\n\n            setTimeout(function () {\n              _list.scrollToPosition(_list.props.scrollTop - 300);\n            }, 0);\n          }, 100);\n        }\n\n        this._didSetInitialScrollPosition = true;\n      } //Video and audio alignment scrolling\n\n\n      if (scrollToId.from == \"video\" && scrollToId.id) {\n        var start = scrollToId.id;\n\n        var _selectedTextIndex2 = this.props.splitText.getTextIndexOfPosition(start);\n\n        setTimeout(function () {\n          list.scrollToRow(_selectedTextIndex2);\n          setTimeout(function () {\n            list.scrollToPosition(list.props.scrollTop - 300);\n          }, 0);\n        }, 100);\n      } // scroll control linked with alignment on click\n\n\n      if (this.selectedWindow === 2 && scrollToId.from == 2 && this.isPanelLinked && this.condition && scrollToId.id !== null) {\n        var _list2 = this.list;\n        this.textAlignmentById = this.props.textAlignmentById || [];\n        this.splitText.style.scrollBehavior = \"smooth\";\n\n        if (Alignment && this.isPanelLinked) {\n          var req = this.textAlignmentById.find(function (l) {\n            return l.TStart === scrollToId.id;\n          });\n\n          var _start = req === null || req === void 0 ? void 0 : req.start;\n\n          if (_start !== null) {\n            var _selectedTextIndex3 = this.props.splitText.getTextIndexOfPosition(_start);\n\n            setTimeout(function () {\n              _list2.scrollToRow(_selectedTextIndex3);\n\n              setTimeout(function () {\n                _list2.scrollToPosition(_list2.props.scrollTop - 300);\n              }, 0);\n            }, 100);\n          }\n        }\n      } //for scrolling to the highlighted alignment if its outside visible DOM\n\n\n      if (this.targetId && scrollToId.from === \"ua\" && this.selectedWindow === 2 && scrollToId.id === \"ua\") {\n        var _clickIdObj$source_se;\n\n        var clickIdObj = Alignment.alignment.find(function (l) {\n          return _this4.targetId >= l.target_segment.start && _this4.targetId < l.target_segment.end;\n        });\n        var syncClickTargetId = clickIdObj === null || clickIdObj === void 0 ? void 0 : (_clickIdObj$source_se = clickIdObj.source_segment) === null || _clickIdObj$source_se === void 0 ? void 0 : _clickIdObj$source_se.start;\n\n        var _selectedTextIndex4 = this.props.splitText.getTextIndexOfPosition(syncClickTargetId);\n\n        setTimeout(function () {\n          list.scrollToRow(_selectedTextIndex4);\n          setTimeout(function () {\n            list.scrollToPosition(list.props.scrollTop - 300);\n          }, 0);\n        }, 100);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"mousedown\", this);\n      document.removeEventListener(\"mouseup\", this);\n      window.removeEventListener(\"resize\", this.resizeHandler);\n      document.removeEventListener(\"selectionchange\", this.selectionHandler);\n      clearTimeout(this.timer);\n    }\n  }, {\n    key: \"calculateImageHeight\",\n    value: function calculateImageHeight() {\n      var height = null;\n\n      if (this.imageHeight && this.imageWidth) {\n        var ratio = this.imageWidth / this.imageHeight;\n        var pechaImageClass = (_SplitText_css__WEBPACK_IMPORTED_MODULE_21___default().pechaImage);\n        var pechaImageContainers = document.getElementsByClassName(pechaImageClass);\n\n        if (pechaImageContainers.length > 0) {\n          var container = pechaImageContainers[0];\n          height = container.offsetWidth / ratio;\n        }\n      }\n\n      return height;\n    }\n  }, {\n    key: \"getSelectedTextIndex\",\n    value: function getSelectedTextIndex() {\n      var selectedTextIndex = 0;\n      var startPos = null;\n\n      if (this.props.activeAnnotation) {\n        var _this$props$splitText = this.props.splitText.annotatedText.getPositionOfAnnotation(this.props.activeAnnotation);\n\n        var _this$props$splitText2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props$splitText, 1);\n\n        startPos = _this$props$splitText2[0];\n      } else if (this.props.selectedSearchResult) {\n        var _segment7 = this.props.splitText.annotatedText.segmentAtOriginalPosition(this.props.selectedSearchResult.start);\n\n        if (_segment7 instanceof lib_TextSegment__WEBPACK_IMPORTED_MODULE_24__[\"default\"]) {\n          startPos = _segment7.start;\n        } else if (typeof _segment7 === \"number\") {\n          startPos = _segment7;\n        }\n      }\n\n      if (startPos) {\n        selectedTextIndex = this.props.splitText.getTextIndexOfPosition(startPos);\n      }\n\n      return selectedTextIndex;\n    }\n  }, {\n    key: \"getBaseAnnotation\",\n    value: function getBaseAnnotation(annotation) {\n      var _this$props$splitText3 = this.props.splitText.annotatedText.getPositionOfAnnotation(annotation),\n          _this$props$splitText4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props$splitText3, 1),\n          start = _this$props$splitText4[0];\n\n      if (start === null) start = 0;\n      return this.props.splitText.annotatedText.getBaseAnnotation(start, annotation.content.length);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var props = this.props;\n      var rowRenderer = this.rowRenderer;\n      var cache = this.cache;\n      var key = props.selectedWitness ? props.selectedWitness.id : 0;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(\"div\", {\n        className: (_SplitText_css__WEBPACK_IMPORTED_MODULE_21___default().splitText),\n        ref: function ref(div) {\n          return _this5.splitText = div;\n        },\n        key: key\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(\"button\", {\n        id: \"updateList\",\n        style: {\n          display: \"none\"\n        },\n        onClick: this.resizeHandler\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(react_virtualized_dist_es_AutoSizer__WEBPACK_IMPORTED_MODULE_10__.AutoSizer, {\n        disableWidth: true\n      }, function (_ref) {\n        var height = _ref.height;\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(react_virtualized_dist_es_List__WEBPACK_IMPORTED_MODULE_11__.List, {\n          width: 1,\n          ref: function ref(list) {\n            return _this5.list = list;\n          },\n          height: height,\n          rowCount: props.splitText.texts.length,\n          rowHeight: cache.rowHeight,\n          rowRenderer: rowRenderer,\n          overscanRowCount: 0,\n          deferredMeasurementCache: cache,\n          onScroll: _this5.scrollEvent,\n          scrollToAlignment: \"start\",\n          containerStyle: {\n            width: \"100%\",\n            maxWidth: \"100%\"\n          },\n          style: {\n            width: \"100%\"\n          }\n        });\n      }));\n    }\n  }, {\n    key: \"getImageUrl\",\n    value: function getImageUrl(pageIndex) {\n      if (!this.props.selectedWitness || !this.props.selectedWitness.properties) return \"\";\n      var witnessProperties = this.props.selectedWitness.properties;\n      var prefix = witnessProperties[IMAGE_START_PRE_KEY];\n      var start = witnessProperties[IMAGE_START_NUMBER_KEY];\n      var suffix = witnessProperties[IMAGE_START_SUFFIX_KEY];\n      var id = Number(start) + pageIndex;\n      console.log(id);\n      var url = IMAGE_URL_PREFIX + prefix + id + \".\" + suffix + IMAGE_URL_SUFFIX;\n      console.log(url);\n      return url;\n    }\n  }, {\n    key: \"getStringPositions\",\n    value: function getStringPositions(text, string, index) {\n      var uniqueId = this.props.splitText.annotatedText.getUniqueId();\n\n      if (!_searchResultsCache.hasOwnProperty(uniqueId)) {\n        _searchResultsCache = (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, uniqueId, {});\n      }\n\n      if (!_searchResultsCache[uniqueId].hasOwnProperty(string)) {\n        _searchResultsCache[uniqueId] = (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, string, {});\n      }\n\n      if (_searchResultsCache[uniqueId][string].hasOwnProperty(index)) {\n        return _searchResultsCache[uniqueId][string][index];\n      }\n\n      var splitter = new (grapheme_splitter__WEBPACK_IMPORTED_MODULE_27___default())();\n      var content = text.getText();\n      var firstSegment = text.segments[0];\n      var startingPosition = firstSegment === null || firstSegment === void 0 ? void 0 : firstSegment.start;\n      var positions = [];\n      var position = content.indexOf(string);\n\n      while (position !== -1) {\n        positions.push(position);\n        position = content.indexOf(string, position + 1);\n      } // Position needs to be position in complete text\n\n\n      var verifiedPositions = {};\n\n      if (positions.length > 0) {\n        var graphemes = splitter.splitGraphemes(content);\n        var _position3 = 0;\n        var activePosition = null;\n\n        for (var i = 0; i < graphemes.length; i++) {\n          var grapheme = graphemes[i];\n          var graphemeEnd = _position3 + (grapheme.length - 1);\n\n          if (activePosition !== null) {\n            var expectedEnd = activePosition + (string.length - 1);\n\n            if (graphemeEnd >= expectedEnd) {\n              verifiedPositions[activePosition + startingPosition] = [activePosition + startingPosition, graphemeEnd + startingPosition];\n              activePosition = null;\n            }\n          } else if (positions.indexOf(_position3) !== -1) {\n            if (string.length === grapheme.length) {\n              verifiedPositions[_position3 + startingPosition] = [_position3 + startingPosition, graphemeEnd + startingPosition];\n            } else if (string.length > grapheme.length) {\n              activePosition = _position3;\n            }\n          } else {\n            activePosition = null;\n          }\n\n          _position3 += grapheme.length;\n        }\n      }\n\n      _searchResultsCache[uniqueId][string][index] = verifiedPositions;\n      return verifiedPositions;\n    }\n  }, {\n    key: \"rowRenderer\",\n    value: function rowRenderer(_ref2) {\n      var key = _ref2.key,\n          index = _ref2.index,\n          parent = _ref2.parent,\n          style = _ref2.style;\n      var props = this.props;\n      var cache = this.cache;\n      var component = this;\n      var pechaImageClass = props.showImages ? (_SplitText_css__WEBPACK_IMPORTED_MODULE_21___default().pechaImage) : null;\n      var imageUrl = \"\"; // if (this.imageData?.alignment && props.selectedWitness) {\n      //     imageUrl = HttpUrl(\n      //         this.imageData?.alignment[index]?.target_segment\n      //     );\n      // }\n\n      if (props.selectedWitness && props.selectedWitness.properties && props.selectedWitness.properties.hasOwnProperty(IMAGE_START_PRE_KEY)) {\n        console.log(\"running\");\n        imageUrl = this.getImageUrl(index);\n      }\n\n      var searchStringPositions = {};\n      var searchValue = this.props.searchValue;\n\n      if (searchValue && searchValue.length > 0 && props.splitText) {\n        searchStringPositions = this.getStringPositions(props.splitText.texts[index], searchValue, index);\n      }\n\n      var pechaStyles = {};\n\n      if (props.showImages && pechaImageClass && this.calculatedImageHeight) {\n        pechaStyles[\"height\"] = this.calculatedImageHeight + \"px\";\n      }\n\n      var newStyle = _objectSpread(_objectSpread({}, style), {}, {\n        height: style.height + 10,\n        cursor: !this.props.isAnnotating ? \"pointer\" : \"text\"\n      });\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(react_virtualized_dist_es_CellMeasurer__WEBPACK_IMPORTED_MODULE_13__.CellMeasurer, {\n        columnIndex: 0,\n        key: key,\n        parent: parent,\n        rowIndex: index,\n        cache: cache\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(\"div\", {\n        key: key,\n        style: newStyle,\n        className: (_SplitText_css__WEBPACK_IMPORTED_MODULE_21___default().splitTextRow),\n        ref: this.splitTextRef,\n        id: \"index_\".concat(index)\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(\"div\", {\n        className: (_SplitText_css__WEBPACK_IMPORTED_MODULE_21___default().splitTextRowContent)\n      }, props.showImages && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(\"div\", {\n        className: pechaImageClass,\n        style: pechaStyles\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(\"img\", {\n        alt: \"Text related Image\",\n        className: (_SplitText_css__WEBPACK_IMPORTED_MODULE_21___default().image),\n        src: imageUrl,\n        width: \"100%\",\n        height: \"100%\",\n        loading: \"lazy\",\n        decoding: \"async\",\n        onLoad: function onLoad(e) {\n          if (e.target && component.imageWidth === null) {\n            component.imageWidth = e.target.naturalWidth;\n            component.imageHeight = e.target.naturalHeight;\n            component.calculatedImageHeight = null;\n            window.setTimeout(component.updateList.bind(component), 0);\n          }\n        }\n      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(_Text__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        ref: this.childRef,\n        segmentedText: props.splitText.texts[index],\n        annotations: props.annotations,\n        activeAnnotations: props.activeAnnotations,\n        activeAnnotation: props.activeAnnotation,\n        row: index,\n        selectedSegmentId: props.selectedSegmentId,\n        annotationPositions: props.annotationPositions,\n        selectedAnnotatedSegments: this._filteredSelectedAnnotatedSegments,\n        getBaseAnnotation: this.getBaseAnnotation.bind(this),\n        activeWitness: this.props.selectedWitness,\n        searchValue: searchValue,\n        selectedSearchResult: this.props.selectedSearchResult,\n        searchStringPositions: searchStringPositions,\n        fontSize: props.fontSize,\n        changeSyncIdOnClick: this.props.changeSyncIdOnClick,\n        changeScrollToId: this.props.changeScrollToId,\n        textAlignmentById: this.props.textAlignmentById,\n        selectedSourceRange: this.props.selectedSourceRange,\n        selectedTargetRange: this.props.selectedTargetRange,\n        changeSelectedRange: this.props.changeSelectedRange,\n        condition: this.condition\n      })), this.props.isAnnotating && this.selectedTextIndex === index && this.props.activeAnnotation && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8__.createElement(_AnnotationControlsContainer__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n        annotationPositions: props.annotationPositions,\n        annotatedText: props.splitText.annotatedText,\n        activeAnnotation: props.activeAnnotation,\n        inline: true,\n        firstSelectedSegment: this.firstSelectedSegment,\n        splitTextRect: this.splitTextRect,\n        selectedElementId: this.selectedElementId,\n        pechaImageClass: pechaImageClass,\n        splitText: props.splitText,\n        selectedElementIds: this.selectedElementIds,\n        list: this.list\n      })));\n    }\n  }]);\n\n  return SplitTextComponent;\n}(react__WEBPACK_IMPORTED_MODULE_8__.PureComponent);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/components/TextDetail/SplitText.js\n");

/***/ }),

/***/ "./app/components/TextDetail/Text.js":
/*!*******************************************!*\
  !*** ./app/components/TextDetail/Text.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"idForDeletedSegment\": () => (/* binding */ idForDeletedSegment),\n/* harmony export */   \"idForInsertion\": () => (/* binding */ idForInsertion),\n/* harmony export */   \"idForLineBreak\": () => (/* binding */ idForLineBreak),\n/* harmony export */   \"idForPageBreak\": () => (/* binding */ idForPageBreak),\n/* harmony export */   \"idForSegment\": () => (/* binding */ idForSegment)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _Text_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Text.css */ \"./app/components/TextDetail/Text.css\");\n/* harmony import */ var _Text_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_Text_css__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lib_TextSegment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lib/TextSegment */ \"./app/lib/TextSegment.js\");\n/* harmony import */ var lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lib/AnnotatedText */ \"./app/lib/AnnotatedText.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var lib_SegmentedText__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lib/SegmentedText */ \"./app/lib/SegmentedText.js\");\n/* harmony import */ var lib_Annotation__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lib/Annotation */ \"./app/lib/Annotation.js\");\n/* harmony import */ var lib_Witness__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lib/Witness */ \"./app/lib/Witness.js\");\n/* harmony import */ var grapheme_splitter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! grapheme-splitter */ \"./node_modules/grapheme-splitter/index.js\");\n/* harmony import */ var grapheme_splitter__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(grapheme_splitter__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _mui_styles__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @mui/styles */ \"./node_modules/@mui/styles/withTheme/withTheme.js\");\n/* harmony import */ var react_dom_server__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! react-dom/server */ \"./node_modules/react-dom/server.browser.js\");\n/* harmony import */ var images_page_break_icon_svg__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! images/page_break_icon.svg */ \"./app/images/page_break_icon.svg\");\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction idForSegment(segment) {\n  return \"s_\" + segment.start;\n}\nfunction idForDeletedSegment(segment) {\n  return \"ds_\" + segment.start;\n}\nfunction idForInsertion(segment) {\n  return \"i_\" + segment.start;\n}\nfunction idForPageBreak(segment) {\n  return \"p_\" + (segment.end + 1);\n}\nfunction idForLineBreak(segment) {\n  return \"l_\" + (segment.end + 1);\n}\n\n\nvar PARA_SYMBOL = String.fromCharCode(182);\nvar pageBreakIconString = react_dom_server__WEBPACK_IMPORTED_MODULE_17__.renderToStaticMarkup( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7___default().createElement(images_page_break_icon_svg__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null));\n\nvar Text = /*#__PURE__*/function (_React$Component) {\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Text, _React$Component);\n\n  var _super = _createSuper(Text);\n\n  function Text(props) {\n    var _this;\n\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Text);\n\n    _this = _super.call(this, props);\n    _this.textAlignmentById = [];\n    _this.state = {\n      segmentedText: props.segmentedText\n    };\n    _this.textAlignmentById = _this.props.textAlignmentById;\n    _this._renderedSegments = null;\n    _this._renderedHtml = null;\n    _this.rangeSelect = [];\n    _this.theme = props.theme;\n    return _this;\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Text, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this.setState(function (prevState, props) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          segmentedText: nextProps.segmentedText\n        });\n      });\n    }\n  }, {\n    key: \"annotationsForSegment\",\n    value: function annotationsForSegment(segment) {\n      var annotations = [];\n      var foundAnnotations = this.props.annotationPositions[String(segment.start)];\n\n      if (foundAnnotations) {\n        annotations = foundAnnotations;\n      }\n\n      var insertions = this.props.annotationPositions[lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__.INSERTION_KEY + segment.start] || [];\n      var deletions = this.props.annotationPositions[lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__.DELETION_KEY + segment.start] || [];\n      var pageBreaks = this.props.annotationPositions[lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__.PAGE_BREAK_KEY + (segment.end + 1)] || [];\n      var lineBreaks = this.props.annotationPositions[lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__.LINE_BREAK_KEY + (segment.end + 1)] || [];\n      return annotations.concat(insertions, deletions, pageBreaks, lineBreaks);\n    }\n  }, {\n    key: \"segmentsContainSegment\",\n    value: function segmentsContainSegment(segments, segment) {\n      for (var i = 0; i < segments.length; i++) {\n        var listSegment = segments[i];\n\n        if (listSegment.start === segment.start && listSegment.text === segment.text) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"selectedElement\",\n    value: function selectedElement(element) {\n      if (element.tagName === \"DIV\") {\n        this.props.selectedSegmentId(\"\");\n        return;\n      }\n\n      var sourceRangeSelection = [];\n      var targetRangeSelection = [];\n      var selection = document.getSelection();\n      var clickId = parseInt(element.id.replace(\"s_\", \"\"));\n      this.props.changeSyncIdOnClick(clickId);\n\n      if (element !== null && element !== void 0 && element.id.includes(\"s_\") && this.props.condition) {\n        this.props.changeScrollToId({\n          id: null,\n          from: null\n        });\n\n        var _id = parseInt(element.id.replace(\"s_\", \"\"));\n\n        var rangeUnique = (0,lodash__WEBPACK_IMPORTED_MODULE_12__.find)(this.textAlignmentById, function (l) {\n          return _id >= l.start && _id < l.end;\n        });\n\n        if (rangeUnique) {\n          for (var i = rangeUnique.start; i < rangeUnique.end; i++) {\n            sourceRangeSelection.push(i);\n          }\n\n          for (var _i = rangeUnique.TStart; _i < rangeUnique.TEnd; _i++) {\n            targetRangeSelection.push(_i);\n          }\n\n          this.props.changeSelectedRange({\n            source: sourceRangeSelection,\n            target: targetRangeSelection\n          });\n        }\n      }\n\n      if (selection && selection.type === \"Range\") {\n        return;\n      }\n\n      this.props.selectedSegmentId(element.id);\n\n      if (!element.id) {\n        this.props.changeSelectedRange({\n          source: [],\n          target: []\n        });\n      }\n    }\n  }, {\n    key: \"generateHtml\",\n    value: function generateHtml(renderProps, renderState) {\n      var segments = renderState.segmentedText.segments;\n      var textLineClass = (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().textLine);\n      var segmentHTML = '<p class=\"' + textLineClass + '\">';\n      if (segments.length === 0) return {\n        __html: segmentHTML\n      };\n      var insertionClass = (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().insertion);\n      var endPosition = segments[segments.length - 1].end + 1;\n\n      if (renderProps.annotationPositions[lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__.INSERTION_KEY + endPosition]) {\n        var endSegment = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_10__[\"default\"](endPosition, \"\");\n        segments.push(endSegment);\n      }\n\n      if (renderProps.annotationPositions[lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__.PAGE_BREAK_KEY + endPosition]) {\n        var _endSegment = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_10__[\"default\"](endPosition, \"\");\n\n        segments.push(_endSegment);\n      }\n\n      if (renderProps.annotationPositions[lib_AnnotatedText__WEBPACK_IMPORTED_MODULE_11__.LINE_BREAK_KEY + endPosition]) {\n        var _endSegment2 = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_10__[\"default\"](endPosition, \"\");\n\n        segments.push(_endSegment2);\n      }\n\n      var activeAnnotations = renderProps.activeAnnotations || {};\n      var highlightClass = (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().highlight);\n      var activeHighlightClass = (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().activeHighlight);\n      var activeSearchResultEnd = null;\n      var processedInactiveInsertions = {};\n\n      for (var i = 0; i < segments.length; i++) {\n        var segment = segments[i];\n        var classAttribute = \"\";\n        var classes = [];\n        var annotations = this.annotationsForSegment(segment);\n        var deletionText = null;\n        var selectedCurrentDeletion = false;\n        var selectedCurrentPageBreak = false;\n        var selectedCurrentLineBreak = false;\n        var lineBreakAnnotation = false;\n        var pageBreakAnnotation = null;\n\n        if (annotations) {\n          var activeInsertions = [];\n          var inactiveInsertions = [];\n          var remainingAnnotations = [];\n          var activeDeletions = [];\n\n          for (var j = 0, len = annotations.length; j < len; j++) {\n            var _annotation = annotations[j];\n\n            if (_annotation.isInsertion) {\n              if (_annotation.uniqueId in activeAnnotations) {\n                activeInsertions.push(_annotation);\n              } else {\n                // Only first inactive insertion at a position will\n                // be shown, so only process first one.\n                // TODO: need to check if there is an active insertion\n                // at the same place. If so, ignore inactive insertion\n                // as they should be shown in the popover.\n                var annotationKey = _annotation.start;\n\n                if (!processedInactiveInsertions.hasOwnProperty(annotationKey)) {\n                  inactiveInsertions.push(_annotation);\n                  processedInactiveInsertions[annotationKey] = _annotation;\n                }\n              }\n            } else {\n              if (_annotation.isDeletion) {\n                if (_annotation.uniqueId in activeAnnotations) {\n                  activeDeletions.push(_annotation);\n                }\n              } else if (_annotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_14__.ANNOTATION_TYPES.pageBreak && !renderProps.activeWitness.isWorking) {\n                pageBreakAnnotation = _annotation;\n              } else if (_annotation.type === lib_Annotation__WEBPACK_IMPORTED_MODULE_14__.ANNOTATION_TYPES.lineBreak && !renderProps.activeWitness.isWorking) {\n                lineBreakAnnotation = _annotation;\n              } else {\n                remainingAnnotations.push(_annotation);\n              }\n            }\n          }\n\n          if (activeInsertions.length === 0 && inactiveInsertions.length > 0) {\n            var insertion = inactiveInsertions[0];\n            var insertionId = idForInsertion(segment);\n            var insertionClasses = insertionClass;\n\n            if (renderProps.activeAnnotation && renderProps.activeAnnotation.isInsertion && renderProps.activeAnnotation.start === insertion.start) {\n              insertionClasses += \" \" + (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().selectedAnnotation);\n            }\n\n            segmentHTML += \"<span id=\" + insertionId + \" key=\" + insertionId + ' class=\"' + insertionClasses + '\">' + insertion.content + \"</span>\";\n          }\n\n          if (activeDeletions.length > 0) {\n            var activeDeletion = activeDeletions[0];\n            var baseAnnotation = renderProps.getBaseAnnotation(activeDeletion);\n            deletionText = baseAnnotation.content;\n\n            if (renderProps.activeAnnotation && renderProps.activeAnnotation.isDeletion && renderProps.activeAnnotation.start === activeDeletion.start && renderProps.activeAnnotation.length === activeDeletion.length && segment.length === 0) {\n              selectedCurrentDeletion = true;\n            }\n          }\n\n          if (pageBreakAnnotation) {\n            if (renderProps.activeAnnotation && renderProps.activeAnnotation.uniqueId === pageBreakAnnotation.uniqueId) {\n              selectedCurrentPageBreak = true;\n            }\n          }\n\n          if (lineBreakAnnotation) {\n            if (renderProps.activeAnnotation && renderProps.activeAnnotation.uniqueId === lineBreakAnnotation.uniqueId) {\n              selectedCurrentLineBreak = true;\n            }\n          }\n\n          if (remainingAnnotations.length > 0 || activeInsertions.length > 0) {\n            classes.push((_Text_css__WEBPACK_IMPORTED_MODULE_9___default().annotation));\n          }\n        } // It's an insertion at the end of the text, which should have just been added to the html.\n        // So break as we don't want anymore segment html adding.\n\n\n        if (segment.start === endPosition) {\n          break;\n        }\n\n        var _id2 = null;\n\n        if (segment.length === 0) {\n          _id2 = idForDeletedSegment(segment);\n          classes.push((_Text_css__WEBPACK_IMPORTED_MODULE_9___default().removedByAnnotation));\n\n          if (deletionText) {\n            segment = new lib_TextSegment__WEBPACK_IMPORTED_MODULE_10__[\"default\"](segment.start, deletionText);\n          }\n        } else {\n          _id2 = idForSegment(segment);\n        }\n\n        if (this.segmentsContainSegment(renderProps.selectedAnnotatedSegments, segment) || selectedCurrentDeletion) {\n          classes.push((_Text_css__WEBPACK_IMPORTED_MODULE_9___default().selectedAnnotation));\n        }\n\n        if (renderProps.selectedSourceRange.includes(segment.start) && renderProps.condition) {\n          var newClass = renderProps.theme.palette.mode === \"light\" ? (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().selectedRangelight) : (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().selectedRangeDark);\n          classes.push(newClass);\n        }\n\n        if (classes.length > 0) {\n          var className = classnames__WEBPACK_IMPORTED_MODULE_8___default().apply(void 0, classes);\n          classAttribute = 'class=\"' + className + '\"';\n        }\n\n        var segmentContent = segment.text; // Add search result highlight if required.\n\n        if (renderProps.searchStringPositions) {\n          var segmentStart = segment.start;\n          var _position = segmentStart;\n          segmentContent = \"\";\n          var highlight = highlightClass;\n\n          if (renderProps.selectedSearchResult && renderProps.selectedSearchResult.start <= _position && renderProps.selectedSearchResult.start + renderProps.selectedSearchResult.length > _position) {\n            highlight = activeHighlightClass;\n          }\n\n          for (var _j = 0; _j < segment.text.length; _j++) {\n            var _char = segment.text.charAt(_j);\n\n            _position = segmentStart + _j;\n\n            if (activeSearchResultEnd) {\n              var _activeSearchResultEn = activeSearchResultEnd,\n                  _activeSearchResultEn2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_activeSearchResultEn, 2),\n                  start = _activeSearchResultEn2[0],\n                  end = _activeSearchResultEn2[1];\n\n              if (_j === 0) {\n                segmentContent += '<span class=\"' + highlight + '\">';\n              }\n\n              if (_position === end) {\n                segmentContent += _char + \"</span>\";\n                activeSearchResultEnd = null;\n              } else if (_j === segment.text.length - 1) {\n                segmentContent += _char + \"</span>\";\n              } else {\n                segmentContent += _char;\n              }\n            } else if (_position in renderProps.searchStringPositions) {\n              var _renderProps$searchSt = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(renderProps.searchStringPositions[_position], 2),\n                  _start = _renderProps$searchSt[0],\n                  _end = _renderProps$searchSt[1];\n\n              segmentContent += '<span class=\"' + highlight + '\">' + _char;\n\n              if (_j === segment.text.length - 1 || _position === _end) {\n                segmentContent += \"</span>\";\n              }\n\n              if (_position < _end) {\n                activeSearchResultEnd = [_start, _end];\n              }\n            } else {\n              segmentContent += _char;\n            }\n          }\n        }\n\n        segmentHTML += \"<span id=\" + _id2 + \" key=\" + _id2 + \" \" + classAttribute + \">\" + segmentContent + \"</span>\";\n\n        if (pageBreakAnnotation) {\n          var pageBreakClasses = [(_Text_css__WEBPACK_IMPORTED_MODULE_9___default().pageBreak)];\n\n          if (selectedCurrentPageBreak) {\n            pageBreakClasses.push((_Text_css__WEBPACK_IMPORTED_MODULE_9___default().selectedAnnotation));\n          }\n\n          var pageBreakClassAttribute = ' class=\"' + pageBreakClasses.join(\" \") + '\" ';\n          segmentHTML += \"<span id=\" + idForPageBreak(segment) + \" key=\" + idForPageBreak(segment) + pageBreakClassAttribute + \">\" + pageBreakIconString + \"</span>\";\n        }\n\n        if (lineBreakAnnotation) {\n          var lineBreakClasses = [(_Text_css__WEBPACK_IMPORTED_MODULE_9___default().lineBreak)];\n\n          if (selectedCurrentLineBreak) {\n            lineBreakClasses.push((_Text_css__WEBPACK_IMPORTED_MODULE_9___default().selectedAnnotation));\n          }\n\n          var lineBreakClassAttribute = ' class=\"' + lineBreakClasses.join(\" \") + '\" ';\n          segmentHTML += \"<span id=\" + idForLineBreak(segment) + \" key=\" + idForLineBreak(segment) + lineBreakClassAttribute + \">\" + PARA_SYMBOL + \"</span>\";\n          segmentHTML += '</p><p class=\"' + textLineClass + '\">';\n        }\n      }\n\n      this._renderedSegments = segments;\n      segmentHTML += \"</p>\";\n      var html = {\n        __html: segmentHTML\n      };\n      return html;\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var renderedHtml = this.generateHtml(nextProps, nextState);\n\n      if (this.props.fontSize !== nextProps.fontSize) {\n        return true;\n      } else if (this._renderedHtml && renderedHtml.__html === this._renderedHtml.__html) {\n        return false;\n      } else {\n        this._renderedHtml = renderedHtml;\n        return true;\n      } // return false;\n\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.textAlignmentById = this.props.textAlignmentById;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = [(_Text_css__WEBPACK_IMPORTED_MODULE_9___default().text)];\n\n      if (this.props.row === 0) {\n        classes.push((_Text_css__WEBPACK_IMPORTED_MODULE_9___default().textFirstRow));\n      } // Generate HTML manually as it is much faster when\n      // creating large numbers of elements, such as these spans.\n\n\n      var html = this._renderedHtml ? this._renderedHtml : this.generateHtml(this.props, this.state);\n\n      if (!this._renderedHtml) {\n        this._renderedHtml = html;\n      }\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7___default().createElement(\"div\", {\n        className: (_Text_css__WEBPACK_IMPORTED_MODULE_9___default().textContainer)\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7___default().createElement(\"div\", {\n        className: classnames__WEBPACK_IMPORTED_MODULE_8___default().apply(void 0, classes),\n        id: \"text1\",\n        dangerouslySetInnerHTML: html,\n        style: {\n          fontSize: this.props.fontSize,\n          fontFamily: \"var(--tibetan-fonts)\"\n        },\n        onClick: function onClick(e) {\n          _this2.selectedElement(e.target);\n        }\n      }));\n    }\n  }]);\n\n  return Text;\n}((react__WEBPACK_IMPORTED_MODULE_7___default().Component));\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_mui_styles__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(Text));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/components/TextDetail/Text.js\n");

/***/ }),

/***/ "./app/lib/shallowEqual.js":
/*!*********************************!*\
  !*** ./app/lib/shallowEqual.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ shallowEqual)\n/* harmony export */ });\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  var aKeys = Object.keys(objA);\n  var bKeys = Object.keys(objB);\n  var len = aKeys.length;\n\n  if (bKeys.length !== len) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var key = aKeys[i];\n\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcHAvbGliL3NoYWxsb3dFcXVhbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWUsU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDO0VBQzdDLElBQUlELElBQUksS0FBS0MsSUFBYixFQUFtQjtJQUNmLE9BQU8sSUFBUDtFQUNIOztFQUVELElBQUlDLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlKLElBQVosQ0FBWjtFQUNBLElBQUlLLEtBQUssR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlILElBQVosQ0FBWjtFQUNBLElBQUlLLEdBQUcsR0FBR0osS0FBSyxDQUFDSyxNQUFoQjs7RUFFQSxJQUFJRixLQUFLLENBQUNFLE1BQU4sS0FBaUJELEdBQXJCLEVBQTBCO0lBQ3RCLE9BQU8sS0FBUDtFQUNIOztFQUVELEtBQUssSUFBSUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsR0FBcEIsRUFBeUJFLENBQUMsRUFBMUIsRUFBOEI7SUFDMUIsSUFBSUMsR0FBRyxHQUFHUCxLQUFLLENBQUNNLENBQUQsQ0FBZjs7SUFFQSxJQUFJUixJQUFJLENBQUNTLEdBQUQsQ0FBSixLQUFjUixJQUFJLENBQUNRLEdBQUQsQ0FBdEIsRUFBNkI7TUFDekIsT0FBTyxLQUFQO0lBQ0g7RUFDSjs7RUFFRCxPQUFPLElBQVA7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbWludXNjbGllbnQvLi9hcHAvbGliL3NoYWxsb3dFcXVhbC5qcz9kM2RkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XHJcbiAgICBpZiAob2JqQSA9PT0gb2JqQikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBhS2V5cyA9IE9iamVjdC5rZXlzKG9iakEpO1xyXG4gICAgbGV0IGJLZXlzID0gT2JqZWN0LmtleXMob2JqQik7XHJcbiAgICBsZXQgbGVuID0gYUtleXMubGVuZ3RoO1xyXG5cclxuICAgIGlmIChiS2V5cy5sZW5ndGggIT09IGxlbikge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGtleSA9IGFLZXlzW2ldO1xyXG5cclxuICAgICAgICBpZiAob2JqQVtrZXldICE9PSBvYmpCW2tleV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iXSwibmFtZXMiOlsic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJhS2V5cyIsIk9iamVjdCIsImtleXMiLCJiS2V5cyIsImxlbiIsImxlbmd0aCIsImkiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/lib/shallowEqual.js\n");

/***/ }),

/***/ "./app/images/lopenling_logo.png":
/*!***************************************!*\
  !*** ./app/images/lopenling_logo.png ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"8967124136190c7842d863e4a862a528.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcHAvaW1hZ2VzL2xvcGVubGluZ19sb2dvLnBuZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUscUJBQXVCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbWludXNjbGllbnQvLi9hcHAvaW1hZ2VzL2xvcGVubGluZ19sb2dvLnBuZz83ZDAyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4OTY3MTI0MTM2MTkwYzc4NDJkODYzZTRhODYyYTUyOC5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/images/lopenling_logo.png\n");

/***/ }),

/***/ "./app/components/TextDetail/SplitText.css":
/*!*************************************************!*\
  !*** ./app/components/TextDetail/SplitText.css ***!
  \*************************************************/
/***/ ((module) => {

eval("// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"inlineWidth\":\"280px\",\"annotationControls\":\"SplitText---annotationControls\",\"annotationContent\":\"SplitText---annotationContent\",\"subTitle\":\"SplitText---subTitle\",\"title\":\"SplitText---title\",\"sectionHeading\":\"SplitText---sectionHeading\",\"text\":\"SplitText---text\",\"padding\":\"SplitText---padding\",\"arrowTop\":\"SplitText---arrowTop\",\"arrowLeft\":\"SplitText---arrowLeft\",\"arrowRight\":\"SplitText---arrowRight\",\"inline\":\"SplitText---inline\",\"arrow\":\"SplitText---arrow\",\"arrowDs\":\"SplitText---arrowDs\",\"nothingSelected\":\"SplitText---nothingSelected\",\"anonymousMessage\":\"SplitText---anonymousMessage\",\"noNotes\":\"SplitText---noNotes\",\"breakButtons\":\"SplitText---breakButtons\",\"splitText\":\"SplitText---splitText\",\"splitTextRowContent\":\"SplitText---splitTextRowContent\",\"splitTextRow\":\"SplitText---splitTextRow\",\"pechaImage\":\"SplitText---pechaImage\",\"image\":\"SplitText---image\",\"controlsPlaceholder\":\"SplitText---controlsPlaceholder\",\"hide\":\"SplitText---hide\",\"pageNumber\":\"SplitText---pageNumber\",\"image-loading\":\"SplitText---image-loading\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcHAvY29tcG9uZW50cy9UZXh0RGV0YWlsL1NwbGl0VGV4dC5jc3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1pbnVzY2xpZW50Ly4vYXBwL2NvbXBvbmVudHMvVGV4dERldGFpbC9TcGxpdFRleHQuY3NzPzJmODgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImdyZWVuLXRpbnRcIjpcIiM4OGFmOGVcIixcImJsdWUtdGludFwiOlwiIzAyNDI3OVwiLFwiYWN0aXZlLWJ1dHRvblwiOlwiIzAwNzQ2YlwiLFwibWFpblRpbnRcIjpcIiMwMjQyNzlcIixcImFjdGl2ZUJ1dHRvblwiOlwiIzAwNzQ2YlwiLFwiaW5saW5lV2lkdGhcIjpcIjI4MHB4XCIsXCJhbm5vdGF0aW9uQ29udHJvbHNcIjpcIlNwbGl0VGV4dC0tLWFubm90YXRpb25Db250cm9sc1wiLFwiYW5ub3RhdGlvbkNvbnRlbnRcIjpcIlNwbGl0VGV4dC0tLWFubm90YXRpb25Db250ZW50XCIsXCJzdWJUaXRsZVwiOlwiU3BsaXRUZXh0LS0tc3ViVGl0bGVcIixcInRpdGxlXCI6XCJTcGxpdFRleHQtLS10aXRsZVwiLFwic2VjdGlvbkhlYWRpbmdcIjpcIlNwbGl0VGV4dC0tLXNlY3Rpb25IZWFkaW5nXCIsXCJ0ZXh0XCI6XCJTcGxpdFRleHQtLS10ZXh0XCIsXCJwYWRkaW5nXCI6XCJTcGxpdFRleHQtLS1wYWRkaW5nXCIsXCJhcnJvd1RvcFwiOlwiU3BsaXRUZXh0LS0tYXJyb3dUb3BcIixcImFycm93TGVmdFwiOlwiU3BsaXRUZXh0LS0tYXJyb3dMZWZ0XCIsXCJhcnJvd1JpZ2h0XCI6XCJTcGxpdFRleHQtLS1hcnJvd1JpZ2h0XCIsXCJpbmxpbmVcIjpcIlNwbGl0VGV4dC0tLWlubGluZVwiLFwiYXJyb3dcIjpcIlNwbGl0VGV4dC0tLWFycm93XCIsXCJhcnJvd0RzXCI6XCJTcGxpdFRleHQtLS1hcnJvd0RzXCIsXCJub3RoaW5nU2VsZWN0ZWRcIjpcIlNwbGl0VGV4dC0tLW5vdGhpbmdTZWxlY3RlZFwiLFwiYW5vbnltb3VzTWVzc2FnZVwiOlwiU3BsaXRUZXh0LS0tYW5vbnltb3VzTWVzc2FnZVwiLFwibm9Ob3Rlc1wiOlwiU3BsaXRUZXh0LS0tbm9Ob3Rlc1wiLFwiYnJlYWtCdXR0b25zXCI6XCJTcGxpdFRleHQtLS1icmVha0J1dHRvbnNcIixcInNwbGl0VGV4dFwiOlwiU3BsaXRUZXh0LS0tc3BsaXRUZXh0XCIsXCJzcGxpdFRleHRSb3dDb250ZW50XCI6XCJTcGxpdFRleHQtLS1zcGxpdFRleHRSb3dDb250ZW50XCIsXCJzcGxpdFRleHRSb3dcIjpcIlNwbGl0VGV4dC0tLXNwbGl0VGV4dFJvd1wiLFwicGVjaGFJbWFnZVwiOlwiU3BsaXRUZXh0LS0tcGVjaGFJbWFnZVwiLFwiaW1hZ2VcIjpcIlNwbGl0VGV4dC0tLWltYWdlXCIsXCJjb250cm9sc1BsYWNlaG9sZGVyXCI6XCJTcGxpdFRleHQtLS1jb250cm9sc1BsYWNlaG9sZGVyXCIsXCJoaWRlXCI6XCJTcGxpdFRleHQtLS1oaWRlXCIsXCJwYWdlTnVtYmVyXCI6XCJTcGxpdFRleHQtLS1wYWdlTnVtYmVyXCIsXCJpbWFnZS1sb2FkaW5nXCI6XCJTcGxpdFRleHQtLS1pbWFnZS1sb2FkaW5nXCJ9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/components/TextDetail/SplitText.css\n");

/***/ }),

/***/ "./app/components/TextDetail/Text.css":
/*!********************************************!*\
  !*** ./app/components/TextDetail/Text.css ***!
  \********************************************/
/***/ ((module) => {

eval("// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"paddingSide\":\"20px\",\"maxWidth\":\"600px\",\"text\":\"Text---text\",\"syncIdClass\":\"Text---syncIdClass\",\"textFirstRow\":\"Text---textFirstRow\",\"textLine\":\"Text---textLine\",\"textline\":\"Text---textline\",\"limitWidth\":\"Text---limitWidth\",\"textContainer\":\"Text---textContainer\",\"annotation\":\"Text---annotation\",\"selectedAnnotation\":\"Text---selectedAnnotation\",\"removedByAnnotation\":\"Text---removedByAnnotation\",\"insertion\":\"Text---insertion\",\"highlight\":\"Text---highlight\",\"activeHighlight\":\"Text---activeHighlight\",\"lineBreak\":\"Text---lineBreak\",\"pageBreak\":\"Text---pageBreak\",\"selectedRangelight\":\"Text---selectedRangelight\",\"selectedRangeDark\":\"Text---selectedRangeDark\",\"selectedImage\":\"Text---selectedImage\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcHAvY29tcG9uZW50cy9UZXh0RGV0YWlsL1RleHQuY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVtaW51c2NsaWVudC8uL2FwcC9jb21wb25lbnRzL1RleHREZXRhaWwvVGV4dC5jc3M/OTQ1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiZ3JlZW4tdGludFwiOlwiIzg4YWY4ZVwiLFwiYmx1ZS10aW50XCI6XCIjMDI0Mjc5XCIsXCJhY3RpdmUtYnV0dG9uXCI6XCIjMDA3NDZiXCIsXCJtYWluVGludFwiOlwiIzAyNDI3OVwiLFwiYWN0aXZlQnV0dG9uXCI6XCIjMDA3NDZiXCIsXCJwYWRkaW5nU2lkZVwiOlwiMjBweFwiLFwibWF4V2lkdGhcIjpcIjYwMHB4XCIsXCJ0ZXh0XCI6XCJUZXh0LS0tdGV4dFwiLFwic3luY0lkQ2xhc3NcIjpcIlRleHQtLS1zeW5jSWRDbGFzc1wiLFwidGV4dEZpcnN0Um93XCI6XCJUZXh0LS0tdGV4dEZpcnN0Um93XCIsXCJ0ZXh0TGluZVwiOlwiVGV4dC0tLXRleHRMaW5lXCIsXCJ0ZXh0bGluZVwiOlwiVGV4dC0tLXRleHRsaW5lXCIsXCJsaW1pdFdpZHRoXCI6XCJUZXh0LS0tbGltaXRXaWR0aFwiLFwidGV4dENvbnRhaW5lclwiOlwiVGV4dC0tLXRleHRDb250YWluZXJcIixcImFubm90YXRpb25cIjpcIlRleHQtLS1hbm5vdGF0aW9uXCIsXCJzZWxlY3RlZEFubm90YXRpb25cIjpcIlRleHQtLS1zZWxlY3RlZEFubm90YXRpb25cIixcInJlbW92ZWRCeUFubm90YXRpb25cIjpcIlRleHQtLS1yZW1vdmVkQnlBbm5vdGF0aW9uXCIsXCJpbnNlcnRpb25cIjpcIlRleHQtLS1pbnNlcnRpb25cIixcImhpZ2hsaWdodFwiOlwiVGV4dC0tLWhpZ2hsaWdodFwiLFwiYWN0aXZlSGlnaGxpZ2h0XCI6XCJUZXh0LS0tYWN0aXZlSGlnaGxpZ2h0XCIsXCJsaW5lQnJlYWtcIjpcIlRleHQtLS1saW5lQnJlYWtcIixcInBhZ2VCcmVha1wiOlwiVGV4dC0tLXBhZ2VCcmVha1wiLFwic2VsZWN0ZWRSYW5nZWxpZ2h0XCI6XCJUZXh0LS0tc2VsZWN0ZWRSYW5nZWxpZ2h0XCIsXCJzZWxlY3RlZFJhbmdlRGFya1wiOlwiVGV4dC0tLXNlbGVjdGVkUmFuZ2VEYXJrXCIsXCJzZWxlY3RlZEltYWdlXCI6XCJUZXh0LS0tc2VsZWN0ZWRJbWFnZVwifTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/components/TextDetail/Text.css\n");

/***/ })

}]);